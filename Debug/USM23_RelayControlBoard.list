
USM23_RelayControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f8  080042f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080042f8  080042f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042f8  080042f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000000c  0800430c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800430c  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002208  00000000  00000000  0002e019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001748d  00000000  00000000  00031e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000debe  00000000  00000000  000492fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b83  00000000  00000000  000571bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ded3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  000ded90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080042b8 	.word	0x080042b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080042b8 	.word	0x080042b8

0800014c <CAN_RX_Handler>:
uint8_t CAN_RX_Queue_Count;

CAN_RxHeaderTypeDef CAN_RxHeader;
uint8_t CAN_Rx_Message[8];

void CAN_RX_Handler(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(CAN_RX_Queue_Count==0){
 8000150:	4b0d      	ldr	r3, [pc, #52]	; (8000188 <CAN_RX_Handler+0x3c>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d013      	beq.n	8000180 <CAN_RX_Handler+0x34>
		return;
	}
	CAN_RX_Queue_Count--;
 8000158:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <CAN_RX_Handler+0x3c>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b09      	ldr	r3, [pc, #36]	; (8000188 <CAN_RX_Handler+0x3c>)
 8000162:	701a      	strb	r2, [r3, #0]

    switch(CAN_RX_Queue[CAN_RX_Queue_Count].id){
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <CAN_RX_Handler+0x3c>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <CAN_RX_Handler+0x40>)
 800016a:	011b      	lsls	r3, r3, #4
 800016c:	4413      	add	r3, r2
 800016e:	330c      	adds	r3, #12
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a07      	ldr	r2, [pc, #28]	; (8000190 <CAN_RX_Handler+0x44>)
 8000174:	4293      	cmp	r3, r2
 8000176:	d105      	bne.n	8000184 <CAN_RX_Handler+0x38>
	case 0x18FF50E5:
		DevCon_Charger(True);
 8000178:	2001      	movs	r0, #1
 800017a:	f000 fe49 	bl	8000e10 <DevCon_Charger>
		break;
 800017e:	e002      	b.n	8000186 <CAN_RX_Handler+0x3a>
		return;
 8000180:	bf00      	nop
 8000182:	e000      	b.n	8000186 <CAN_RX_Handler+0x3a>
    default:
    	break;
 8000184:	bf00      	nop
    }
}
 8000186:	bd80      	pop	{r7, pc}
 8000188:	20000228 	.word	0x20000228
 800018c:	20000028 	.word	0x20000028
 8000190:	18ff50e5 	.word	0x18ff50e5

08000194 <CAN_UTIL_Transmit>:
CAN_Message CAN_Messages[CAN_TX_N];

void CAN_UTIL_Transmit(CAN_HandleTypeDef *hcan, CAN_TX message){
 8000194:	b580      	push	{r7, lr}
 8000196:	b08a      	sub	sp, #40	; 0x28
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	460b      	mov	r3, r1
 800019e:	70fb      	strb	r3, [r7, #3]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Tx_Mailbox;

	TxHeader.DLC = CAN_Messages[message].length;
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	4a10      	ldr	r2, [pc, #64]	; (80001e4 <CAN_UTIL_Transmit+0x50>)
 80001a4:	011b      	lsls	r3, r3, #4
 80001a6:	4413      	add	r3, r2
 80001a8:	3308      	adds	r3, #8
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_EXT;
 80001ae:	2304      	movs	r3, #4
 80001b0:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61fb      	str	r3, [r7, #28]
	TxHeader.ExtId = CAN_Messages[message].id;
 80001b6:	78fb      	ldrb	r3, [r7, #3]
 80001b8:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <CAN_UTIL_Transmit+0x50>)
 80001ba:	011b      	lsls	r3, r3, #4
 80001bc:	4413      	add	r3, r2
 80001be:	330c      	adds	r3, #12
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	617b      	str	r3, [r7, #20]

	HAL_CAN_AddTxMessage(hcan, &TxHeader, CAN_Messages[message].data, &Tx_Mailbox);
 80001c4:	78fb      	ldrb	r3, [r7, #3]
 80001c6:	011b      	lsls	r3, r3, #4
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <CAN_UTIL_Transmit+0x50>)
 80001ca:	441a      	add	r2, r3
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	f107 0110 	add.w	r1, r7, #16
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f002 f805 	bl	80021e4 <HAL_CAN_AddTxMessage>
	CAN_UTIL_LED_Code(HAL_GPIO_TogglePin(CAN_UTIL_LED_Port, CAN_UTIL_LED_Pin));
}
 80001da:	bf00      	nop
 80001dc:	3728      	adds	r7, #40	; 0x28
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000250 	.word	0x20000250

080001e8 <CAN_UTIL_SetID>:

void CAN_UTIL_SetID(CAN_TX message, uint32_t id){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
	CAN_Messages[message].id = id;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a05      	ldr	r2, [pc, #20]	; (800020c <CAN_UTIL_SetID+0x24>)
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	330c      	adds	r3, #12
 80001fe:	683a      	ldr	r2, [r7, #0]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000250 	.word	0x20000250

08000210 <CAN_UTIL_SetLength>:
void CAN_UTIL_SetLength(CAN_TX message, uint8_t length){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	460a      	mov	r2, r1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	4613      	mov	r3, r2
 800021e:	71bb      	strb	r3, [r7, #6]
	CAN_Messages[message].length = length;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a05      	ldr	r2, [pc, #20]	; (8000238 <CAN_UTIL_SetLength+0x28>)
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	4413      	add	r3, r2
 8000228:	3308      	adds	r3, #8
 800022a:	79ba      	ldrb	r2, [r7, #6]
 800022c:	701a      	strb	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	20000250 	.word	0x20000250

0800023c <CAN_UTIL_Setup>:

void CAN_UTIL_Setup(CAN_TX message, uint32_t id, uint8_t length){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	6039      	str	r1, [r7, #0]
 8000246:	71fb      	strb	r3, [r7, #7]
 8000248:	4613      	mov	r3, r2
 800024a:	71bb      	strb	r3, [r7, #6]
	CAN_UTIL_SetID(message, id);
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	6839      	ldr	r1, [r7, #0]
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ffc9 	bl	80001e8 <CAN_UTIL_SetID>
	CAN_UTIL_SetLength(message, length);
 8000256:	79ba      	ldrb	r2, [r7, #6]
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4611      	mov	r1, r2
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffd7 	bl	8000210 <CAN_UTIL_SetLength>
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <CAN_UTIL_SetData>:

void CAN_UTIL_SetByte(CAN_TX message, uint8_t index, uint8_t data){
	if(index>7){return;}
	CAN_Messages[message].data[index]=data;
}
void CAN_UTIL_SetData(CAN_TX message, uint8_t data_0, uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t data_4, uint8_t data_5, uint8_t data_6, uint8_t data_7){
 800026c:	b490      	push	{r4, r7}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4604      	mov	r4, r0
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4623      	mov	r3, r4
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4603      	mov	r3, r0
 8000280:	71bb      	strb	r3, [r7, #6]
 8000282:	460b      	mov	r3, r1
 8000284:	717b      	strb	r3, [r7, #5]
 8000286:	4613      	mov	r3, r2
 8000288:	713b      	strb	r3, [r7, #4]
	CAN_Messages[message].data[0]=data_0;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <CAN_UTIL_SetData+0x98>)
 800028e:	011b      	lsls	r3, r3, #4
 8000290:	4413      	add	r3, r2
 8000292:	79ba      	ldrb	r2, [r7, #6]
 8000294:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[1]=data_1;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <CAN_UTIL_SetData+0x98>)
 800029a:	011b      	lsls	r3, r3, #4
 800029c:	4413      	add	r3, r2
 800029e:	3301      	adds	r3, #1
 80002a0:	797a      	ldrb	r2, [r7, #5]
 80002a2:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[2]=data_2;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	4a17      	ldr	r2, [pc, #92]	; (8000304 <CAN_UTIL_SetData+0x98>)
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	4413      	add	r3, r2
 80002ac:	3302      	adds	r3, #2
 80002ae:	793a      	ldrb	r2, [r7, #4]
 80002b0:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[3]=data_3;
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <CAN_UTIL_SetData+0x98>)
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	4413      	add	r3, r2
 80002ba:	3303      	adds	r3, #3
 80002bc:	7c3a      	ldrb	r2, [r7, #16]
 80002be:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[4]=data_4;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <CAN_UTIL_SetData+0x98>)
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4413      	add	r3, r2
 80002c8:	3304      	adds	r3, #4
 80002ca:	7d3a      	ldrb	r2, [r7, #20]
 80002cc:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[5]=data_5;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <CAN_UTIL_SetData+0x98>)
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	4413      	add	r3, r2
 80002d6:	3305      	adds	r3, #5
 80002d8:	7e3a      	ldrb	r2, [r7, #24]
 80002da:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[6]=data_6;
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4a09      	ldr	r2, [pc, #36]	; (8000304 <CAN_UTIL_SetData+0x98>)
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4413      	add	r3, r2
 80002e4:	3306      	adds	r3, #6
 80002e6:	7f3a      	ldrb	r2, [r7, #28]
 80002e8:	701a      	strb	r2, [r3, #0]
	CAN_Messages[message].data[7]=data_7;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <CAN_UTIL_SetData+0x98>)
 80002ee:	011b      	lsls	r3, r3, #4
 80002f0:	4413      	add	r3, r2
 80002f2:	3307      	adds	r3, #7
 80002f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc90      	pop	{r4, r7}
 8000302:	4770      	bx	lr
 8000304:	20000250 	.word	0x20000250

08000308 <HAL_CAN_TxMailbox0CompleteCallback>:
uint8_t CAN_UTIL_GetByte(CAN_TX message, uint8_t index){
	if(index>7){return 0;}
	return CAN_Messages[message].data[index];
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef * hcan){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
	...

0800031c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * can){
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(can, CAN_RX_FIFO0, &CAN_RxHeader, CAN_Rx_Message);
 8000324:	4b3f      	ldr	r3, [pc, #252]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000326:	4a40      	ldr	r2, [pc, #256]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000328:	2100      	movs	r1, #0
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f002 f834 	bl	8002398 <HAL_CAN_GetRxMessage>
	if(can == &hcan){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a3e      	ldr	r2, [pc, #248]	; (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d171      	bne.n	800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
	    CAN_RX_Queue[CAN_RX_Queue_Count].id = CAN_RxHeader.ExtId;
 8000338:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	4b3a      	ldr	r3, [pc, #232]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	493c      	ldr	r1, [pc, #240]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000344:	0103      	lsls	r3, r0, #4
 8000346:	440b      	add	r3, r1
 8000348:	330c      	adds	r3, #12
 800034a:	601a      	str	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].length = CAN_RxHeader.DLC;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800034e:	691a      	ldr	r2, [r3, #16]
 8000350:	4b37      	ldr	r3, [pc, #220]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	b2d1      	uxtb	r1, r2
 8000356:	4a37      	ldr	r2, [pc, #220]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000358:	011b      	lsls	r3, r3, #4
 800035a:	4413      	add	r3, r2
 800035c:	3308      	adds	r3, #8
 800035e:	460a      	mov	r2, r1
 8000360:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[0] = CAN_Rx_Message[0];
 8000362:	4b33      	ldr	r3, [pc, #204]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800036a:	7819      	ldrb	r1, [r3, #0]
 800036c:	4a31      	ldr	r2, [pc, #196]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800036e:	0103      	lsls	r3, r0, #4
 8000370:	4413      	add	r3, r2
 8000372:	460a      	mov	r2, r1
 8000374:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[1] = CAN_Rx_Message[1];
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800037e:	7859      	ldrb	r1, [r3, #1]
 8000380:	4a2c      	ldr	r2, [pc, #176]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000382:	0103      	lsls	r3, r0, #4
 8000384:	4413      	add	r3, r2
 8000386:	3301      	adds	r3, #1
 8000388:	460a      	mov	r2, r1
 800038a:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[2] = CAN_Rx_Message[2];
 800038c:	4b28      	ldr	r3, [pc, #160]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	4b24      	ldr	r3, [pc, #144]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000394:	7899      	ldrb	r1, [r3, #2]
 8000396:	4a27      	ldr	r2, [pc, #156]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000398:	0103      	lsls	r3, r0, #4
 800039a:	4413      	add	r3, r2
 800039c:	3302      	adds	r3, #2
 800039e:	460a      	mov	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[3] = CAN_Rx_Message[3];
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003aa:	78d9      	ldrb	r1, [r3, #3]
 80003ac:	4a21      	ldr	r2, [pc, #132]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80003ae:	0103      	lsls	r3, r0, #4
 80003b0:	4413      	add	r3, r2
 80003b2:	3303      	adds	r3, #3
 80003b4:	460a      	mov	r2, r1
 80003b6:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[4] = CAN_Rx_Message[4];
 80003b8:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003c0:	7919      	ldrb	r1, [r3, #4]
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80003c4:	0103      	lsls	r3, r0, #4
 80003c6:	4413      	add	r3, r2
 80003c8:	3304      	adds	r3, #4
 80003ca:	460a      	mov	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[5] = CAN_Rx_Message[5];
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003d6:	7959      	ldrb	r1, [r3, #5]
 80003d8:	4a16      	ldr	r2, [pc, #88]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80003da:	0103      	lsls	r3, r0, #4
 80003dc:	4413      	add	r3, r2
 80003de:	3305      	adds	r3, #5
 80003e0:	460a      	mov	r2, r1
 80003e2:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[6] = CAN_Rx_Message[6];
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003ec:	7999      	ldrb	r1, [r3, #6]
 80003ee:	4a11      	ldr	r2, [pc, #68]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80003f0:	0103      	lsls	r3, r0, #4
 80003f2:	4413      	add	r3, r2
 80003f4:	3306      	adds	r3, #6
 80003f6:	460a      	mov	r2, r1
 80003f8:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue[CAN_RX_Queue_Count].data[7] = CAN_Rx_Message[7];
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000402:	79d9      	ldrb	r1, [r3, #7]
 8000404:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000406:	0103      	lsls	r3, r0, #4
 8000408:	4413      	add	r3, r2
 800040a:	3307      	adds	r3, #7
 800040c:	460a      	mov	r2, r1
 800040e:	701a      	strb	r2, [r3, #0]
	    CAN_RX_Queue_Count++;
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800041a:	701a      	strb	r2, [r3, #0]

	}

}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000248 	.word	0x20000248
 8000428:	2000022c 	.word	0x2000022c
 800042c:	2000026c 	.word	0x2000026c
 8000430:	20000228 	.word	0x20000228
 8000434:	20000028 	.word	0x20000028

08000438 <Err_Handler>:
#include "stm32_utils.h"
#include "can_utils.h"

RCB_HANDLE hrcb;

void Err_Handler(){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	Kill();
 800043c:	f000 fac8 	bl	80009d0 <Kill>
	while(1){
		IWDG_Delay(500);
 8000440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000444:	f001 fa54 	bl	80018f0 <IWDG_Delay>
		HV_Check();
 8000448:	f000 f9ec 	bl	8000824 <HV_Check>
		CAN_Transmit_State();
 800044c:	f000 fc10 	bl	8000c70 <CAN_Transmit_State>
		IWDG_Delay(500);
 8000450:	e7f6      	b.n	8000440 <Err_Handler+0x8>
	...

08000454 <Input_Check>:
	}
}

void Input_Check(){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HV_Check();
 8000458:	f000 f9e4 	bl	8000824 <HV_Check>
	if(HAL_GPIO_ReadPin(IND_60V_GPIO_Port, IND_60V_Pin) == GPIO_PIN_SET) {
 800045c:	2110      	movs	r1, #16
 800045e:	4832      	ldr	r0, [pc, #200]	; (8000528 <Input_Check+0xd4>)
 8000460:	f002 fd8e 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000464:	4603      	mov	r3, r0
 8000466:	2b01      	cmp	r3, #1
 8000468:	d104      	bne.n	8000474 <Input_Check+0x20>
		//60V detected on startup.
		ERR(ERR_60V_ENG_STARTUP)
 800046a:	4b30      	ldr	r3, [pc, #192]	; (800052c <Input_Check+0xd8>)
 800046c:	220b      	movs	r2, #11
 800046e:	701a      	strb	r2, [r3, #0]
 8000470:	f7ff ffe2 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(RELAY_AUX_AIRPOS_GPIO_Port, RELAY_AUX_AIRPOS_Pin) == GPIO_PIN_SET) {
 8000474:	2120      	movs	r1, #32
 8000476:	482c      	ldr	r0, [pc, #176]	; (8000528 <Input_Check+0xd4>)
 8000478:	f002 fd82 	bl	8002f80 <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b01      	cmp	r3, #1
 8000480:	d104      	bne.n	800048c <Input_Check+0x38>
		//AIRPOS engaged on startup.
		ERR(ERR_RELAY_AIRPOS_ENG_STARTUP)
 8000482:	4b2a      	ldr	r3, [pc, #168]	; (800052c <Input_Check+0xd8>)
 8000484:	2208      	movs	r2, #8
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	f7ff ffd6 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(RELAY_AUX_AIRNEG_GPIO_Port, RELAY_AUX_AIRNEG_Pin) == GPIO_PIN_SET) {
 800048c:	2140      	movs	r1, #64	; 0x40
 800048e:	4826      	ldr	r0, [pc, #152]	; (8000528 <Input_Check+0xd4>)
 8000490:	f002 fd76 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	d104      	bne.n	80004a4 <Input_Check+0x50>
		//AIRNEG engaged on startup.
		ERR(ERR_RELAY_AIRNEG_ENG_STARTUP)
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <Input_Check+0xd8>)
 800049c:	2209      	movs	r2, #9
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	f7ff ffca 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(RELAY_AUX_PC_GPIO_Port, RELAY_AUX_PC_Pin) == GPIO_PIN_SET) {
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	4820      	ldr	r0, [pc, #128]	; (8000528 <Input_Check+0xd4>)
 80004a8:	f002 fd6a 	bl	8002f80 <HAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d104      	bne.n	80004bc <Input_Check+0x68>
		//Pre-Charge relay engaged on startup.
		ERR(ERR_RELAY_PC_ENG_STARTUP)
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <Input_Check+0xd8>)
 80004b4:	2207      	movs	r2, #7
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	f7ff ffbe 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(IND_PWR_IMD_GPIO_Port, IND_PWR_IMD_Pin) == GPIO_PIN_RESET){
 80004bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <Input_Check+0xd4>)
 80004c2:	f002 fd5d 	bl	8002f80 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d104      	bne.n	80004d6 <Input_Check+0x82>
		//No power detected for IMD on startup.
		ERR(ERR_NO_PWR_IMD_STARTUP)
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <Input_Check+0xd8>)
 80004ce:	220f      	movs	r2, #15
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	f7ff ffb1 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(IND_PWR_FAN1_GPIO_Port, IND_PWR_FAN1_Pin) == GPIO_PIN_RESET){
 80004d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004da:	4813      	ldr	r0, [pc, #76]	; (8000528 <Input_Check+0xd4>)
 80004dc:	f002 fd50 	bl	8002f80 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d104      	bne.n	80004f0 <Input_Check+0x9c>
		//No power detected for fan power 1 on startup.
		ERR(ERR_NO_PWR_FAN1_STARTUP)
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <Input_Check+0xd8>)
 80004e8:	2210      	movs	r2, #16
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	f7ff ffa4 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(IND_PWR_FAN2_GPIO_Port, IND_PWR_FAN2_Pin) == GPIO_PIN_RESET){
 80004f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <Input_Check+0xd4>)
 80004f6:	f002 fd43 	bl	8002f80 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d104      	bne.n	800050a <Input_Check+0xb6>
		//No power detected for fan power 2 on startup.
		ERR(ERR_NO_PWR_FAN2_STARTUP)
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Input_Check+0xd8>)
 8000502:	2211      	movs	r2, #17
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	f7ff ff97 	bl	8000438 <Err_Handler>
	}
	if(HAL_GPIO_ReadPin(REQUEST_TS_GPIO_Port, REQUEST_TS_Pin) == GPIO_PIN_SET){
 800050a:	2108      	movs	r1, #8
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <Input_Check+0xd4>)
 800050e:	f002 fd37 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d104      	bne.n	8000522 <Input_Check+0xce>
		//TS activated on start-up.
		ERR(ERR_TS_ACTIVE_ONSTART)
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <Input_Check+0xd8>)
 800051a:	222f      	movs	r2, #47	; 0x2f
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	f7ff ff8b 	bl	8000438 <Err_Handler>
	}
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010c00 	.word	0x40010c00
 800052c:	20000260 	.word	0x20000260

08000530 <Relay_AIRPOS_SetState>:

void Relay_AIRPOS_SetState(RELAY_STATE state){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	BITSET(hrcb.RELAY_IT_IGNORE, RI_AIRPOS);	//Ignore AUX change interrupt as this isn't an accidental trigger.
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <Relay_AIRPOS_SetState+0x4c>)
 800053c:	789b      	ldrb	r3, [r3, #2]
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <Relay_AIRPOS_SetState+0x4c>)
 8000546:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(RELAY_TRIGGER_AIRPOS_GPIO_Port, RELAY_TRIGGER_AIRPOS_Pin, (uint8_t)state);	//Trigger relay.
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	461a      	mov	r2, r3
 800054c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <Relay_AIRPOS_SetState+0x50>)
 8000552:	f002 fd2c 	bl	8002fae <HAL_GPIO_WritePin>

	IWDG_Delay(RELAY_CHECK_DELAY);	//Delay to let relays change state before checking transition.
 8000556:	20c8      	movs	r0, #200	; 0xc8
 8000558:	f001 f9ca 	bl	80018f0 <IWDG_Delay>

	Relay_AIRPOS_Check();	//Checks to confirm relay has changed state as intented.
 800055c:	f000 f866 	bl	800062c <Relay_AIRPOS_Check>
	BITRESET(hrcb.RELAY_IT_IGNORE,RI_AIRPOS);	//Let AUX trigger interrupts again as any changes here on will be unintended.
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <Relay_AIRPOS_SetState+0x4c>)
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	f023 0304 	bic.w	r3, r3, #4
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <Relay_AIRPOS_SetState+0x4c>)
 800056c:	709a      	strb	r2, [r3, #2]
	CAN_Transmit_State();
 800056e:	f000 fb7f 	bl	8000c70 <CAN_Transmit_State>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000260 	.word	0x20000260
 8000580:	40011000 	.word	0x40011000

08000584 <Relay_AIRNEG_SetState>:
void Relay_AIRNEG_SetState(RELAY_STATE state){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	BITSET(hrcb.RELAY_IT_IGNORE, RI_AIRNEG);	//Ignore AUX change interrupt as this isn't an accidental trigger.
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <Relay_AIRNEG_SetState+0x4c>)
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <Relay_AIRNEG_SetState+0x4c>)
 800059a:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(RELAY_TRIGGER_AIRNEG_GPIO_Port, RELAY_TRIGGER_AIRNEG_Pin, (uint8_t)state);	//Trigger relay.
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	461a      	mov	r2, r3
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <Relay_AIRNEG_SetState+0x50>)
 80005a6:	f002 fd02 	bl	8002fae <HAL_GPIO_WritePin>

	IWDG_Delay(RELAY_CHECK_DELAY);	//Delay to let relays change state before checking transition.
 80005aa:	20c8      	movs	r0, #200	; 0xc8
 80005ac:	f001 f9a0 	bl	80018f0 <IWDG_Delay>

	Relay_AIRNEG_Check();	//Checks to confirm relay has changed state as intented.
 80005b0:	f000 f890 	bl	80006d4 <Relay_AIRNEG_Check>
	BITRESET(hrcb.RELAY_IT_IGNORE,RI_AIRNEG);	//Let AUX trigger interrupts again as any changes here on will be unintended.
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <Relay_AIRNEG_SetState+0x4c>)
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	f023 0302 	bic.w	r3, r3, #2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <Relay_AIRNEG_SetState+0x4c>)
 80005c0:	709a      	strb	r2, [r3, #2]
	CAN_Transmit_State();
 80005c2:	f000 fb55 	bl	8000c70 <CAN_Transmit_State>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000260 	.word	0x20000260
 80005d4:	40011000 	.word	0x40011000

080005d8 <Relay_PC_SetState>:
void Relay_PC_SetState(RELAY_STATE state){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	BITSET(hrcb.RELAY_IT_IGNORE, RI_PC);	//Ignore AUX change interrupt as this isn't an accidental trigger.
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <Relay_PC_SetState+0x4c>)
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <Relay_PC_SetState+0x4c>)
 80005ee:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(RELAY_TRIGGER_PC_GPIO_Port, RELAY_TRIGGER_PC_Pin, (uint8_t)state);	//Trigger relay.
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <Relay_PC_SetState+0x50>)
 80005fa:	f002 fcd8 	bl	8002fae <HAL_GPIO_WritePin>

	IWDG_Delay(RELAY_CHECK_DELAY);	//Delay to let relays change state before checking transition.
 80005fe:	20c8      	movs	r0, #200	; 0xc8
 8000600:	f001 f976 	bl	80018f0 <IWDG_Delay>

	Relay_PC_Check();	//Checks to confirm relay has changed state as intented.
 8000604:	f000 f8ba 	bl	800077c <Relay_PC_Check>
	BITRESET(hrcb.RELAY_IT_IGNORE,RI_PC);	//Let AUX trigger interrupts again as any changes here on will be unintended.
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <Relay_PC_SetState+0x4c>)
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <Relay_PC_SetState+0x4c>)
 8000614:	709a      	strb	r2, [r3, #2]
	CAN_Transmit_State();
 8000616:	f000 fb2b 	bl	8000c70 <CAN_Transmit_State>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000260 	.word	0x20000260
 8000628:	40011000 	.word	0x40011000

0800062c <Relay_AIRPOS_Check>:


void Relay_AIRPOS_Check(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	//Compares the AUX reading and the Trigger pin Status

	//If AUX detects relay open...
	if (HAL_GPIO_ReadPin(RELAY_AUX_AIRPOS_GPIO_Port, RELAY_AUX_AIRPOS_Pin) == GPIO_PIN_RESET) {
 8000630:	2120      	movs	r1, #32
 8000632:	4825      	ldr	r0, [pc, #148]	; (80006c8 <Relay_AIRPOS_Check+0x9c>)
 8000634:	f002 fca4 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d121      	bne.n	8000682 <Relay_AIRPOS_Check+0x56>
		//If trigger is open...
		if (HAL_GPIO_ReadPin(RELAY_TRIGGER_AIRPOS_GPIO_Port, RELAY_TRIGGER_AIRPOS_Pin) == GPIO_PIN_RESET) {
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <Relay_AIRPOS_Check+0xa0>)
 8000644:	f002 fc9c 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d107      	bne.n	800065e <Relay_AIRPOS_Check+0x32>
			BITRESET(hrcb.RELAY_STATES,RS_AIRPOS);
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 0304 	bic.w	r3, r3, #4
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 800065a:	705a      	strb	r2, [r3, #1]
			}else{
				ERR(ERR_RELAY_AIRPOS_ENG);
			}
		}
	}
}
 800065c:	e032      	b.n	80006c4 <Relay_AIRPOS_Check+0x98>
			if(BITCHECK(hrcb.RELAY_IT_IGNORE,RI_AIRPOS)){
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d005      	beq.n	8000676 <Relay_AIRPOS_Check+0x4a>
				ERR(ERR_RELAY_AIRPOS_ENG_FAIL);
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 800066c:	2228      	movs	r2, #40	; 0x28
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	f7ff fee2 	bl	8000438 <Err_Handler>
}
 8000674:	e026      	b.n	80006c4 <Relay_AIRPOS_Check+0x98>
				ERR(ERR_RELAY_AIRPOS_DISENG);
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 8000678:	2202      	movs	r2, #2
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	f7ff fedc 	bl	8000438 <Err_Handler>
}
 8000680:	e020      	b.n	80006c4 <Relay_AIRPOS_Check+0x98>
		if (HAL_GPIO_ReadPin(RELAY_TRIGGER_AIRPOS_GPIO_Port, RELAY_TRIGGER_AIRPOS_Pin) == GPIO_PIN_SET) {
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <Relay_AIRPOS_Check+0xa0>)
 8000688:	f002 fc7a 	bl	8002f80 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d107      	bne.n	80006a2 <Relay_AIRPOS_Check+0x76>
			BITSET(hrcb.RELAY_STATES,RS_AIRPOS);
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 800069e:	705a      	strb	r2, [r3, #1]
}
 80006a0:	e010      	b.n	80006c4 <Relay_AIRPOS_Check+0x98>
			if(BITCHECK(hrcb.RELAY_IT_IGNORE,RI_AIRPOS)){
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d005      	beq.n	80006ba <Relay_AIRPOS_Check+0x8e>
				ERR(ERR_RELAY_AIRPOS_DISENG_FAIL);
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 80006b0:	2229      	movs	r2, #41	; 0x29
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	f7ff fec0 	bl	8000438 <Err_Handler>
}
 80006b8:	e004      	b.n	80006c4 <Relay_AIRPOS_Check+0x98>
				ERR(ERR_RELAY_AIRPOS_ENG);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <Relay_AIRPOS_Check+0xa4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	f7ff feba 	bl	8000438 <Err_Handler>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40011000 	.word	0x40011000
 80006d0:	20000260 	.word	0x20000260

080006d4 <Relay_AIRNEG_Check>:
void Relay_AIRNEG_Check(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	//Compares the AUX reading and the Trigger pin Status

	//If AUX detects relay open...
	if (HAL_GPIO_ReadPin(RELAY_AUX_AIRNEG_GPIO_Port, RELAY_AUX_AIRNEG_Pin) == GPIO_PIN_RESET) {
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4825      	ldr	r0, [pc, #148]	; (8000770 <Relay_AIRNEG_Check+0x9c>)
 80006dc:	f002 fc50 	bl	8002f80 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d121      	bne.n	800072a <Relay_AIRNEG_Check+0x56>
		//If trigger is open...
		if (HAL_GPIO_ReadPin(RELAY_TRIGGER_AIRNEG_GPIO_Port, RELAY_TRIGGER_AIRNEG_Pin) == GPIO_PIN_RESET) {
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4822      	ldr	r0, [pc, #136]	; (8000774 <Relay_AIRNEG_Check+0xa0>)
 80006ec:	f002 fc48 	bl	8002f80 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d107      	bne.n	8000706 <Relay_AIRNEG_Check+0x32>
			BITRESET(hrcb.RELAY_STATES,RS_AIRNEG);
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	f023 0302 	bic.w	r3, r3, #2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000702:	705a      	strb	r2, [r3, #1]
			}else{
				ERR(ERR_RELAY_AIRNEG_ENG);
			}
		}
	}
}
 8000704:	e032      	b.n	800076c <Relay_AIRNEG_Check+0x98>
			if(BITCHECK(hrcb.RELAY_IT_IGNORE,RI_AIRNEG)){
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <Relay_AIRNEG_Check+0x4a>
				ERR(ERR_RELAY_AIRNEG_ENG_FAIL);
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000714:	222a      	movs	r2, #42	; 0x2a
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	f7ff fe8e 	bl	8000438 <Err_Handler>
}
 800071c:	e026      	b.n	800076c <Relay_AIRNEG_Check+0x98>
				ERR(ERR_RELAY_AIRNEG_DISENG);
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000720:	2204      	movs	r2, #4
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	f7ff fe88 	bl	8000438 <Err_Handler>
}
 8000728:	e020      	b.n	800076c <Relay_AIRNEG_Check+0x98>
		if (HAL_GPIO_ReadPin(RELAY_TRIGGER_AIRNEG_GPIO_Port, RELAY_TRIGGER_AIRNEG_Pin) == GPIO_PIN_SET) {
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4811      	ldr	r0, [pc, #68]	; (8000774 <Relay_AIRNEG_Check+0xa0>)
 8000730:	f002 fc26 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d107      	bne.n	800074a <Relay_AIRNEG_Check+0x76>
			BITSET(hrcb.RELAY_STATES,RS_AIRNEG);
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000746:	705a      	strb	r2, [r3, #1]
}
 8000748:	e010      	b.n	800076c <Relay_AIRNEG_Check+0x98>
			if(BITCHECK(hrcb.RELAY_IT_IGNORE,RI_AIRNEG)){
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	2b00      	cmp	r3, #0
 8000754:	d005      	beq.n	8000762 <Relay_AIRNEG_Check+0x8e>
				ERR(ERR_RELAY_AIRNEG_DISENG_FAIL);
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000758:	222b      	movs	r2, #43	; 0x2b
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	f7ff fe6c 	bl	8000438 <Err_Handler>
}
 8000760:	e004      	b.n	800076c <Relay_AIRNEG_Check+0x98>
				ERR(ERR_RELAY_AIRNEG_ENG);
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <Relay_AIRNEG_Check+0xa4>)
 8000764:	2203      	movs	r2, #3
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	f7ff fe66 	bl	8000438 <Err_Handler>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010c00 	.word	0x40010c00
 8000774:	40011000 	.word	0x40011000
 8000778:	20000260 	.word	0x20000260

0800077c <Relay_PC_Check>:
void Relay_PC_Check(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//Compares the AUX reading and the Trigger pin Status

	//If AUX detects relay open...
	if (HAL_GPIO_ReadPin(RELAY_AUX_PC_GPIO_Port, RELAY_AUX_PC_Pin) == GPIO_PIN_RESET) {
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <Relay_PC_Check+0x9c>)
 8000784:	f002 fbfc 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d121      	bne.n	80007d2 <Relay_PC_Check+0x56>
		//If trigger is open...
		if (HAL_GPIO_ReadPin(RELAY_TRIGGER_PC_GPIO_Port, RELAY_TRIGGER_PC_Pin) == GPIO_PIN_RESET) {
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	4822      	ldr	r0, [pc, #136]	; (800081c <Relay_PC_Check+0xa0>)
 8000794:	f002 fbf4 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d107      	bne.n	80007ae <Relay_PC_Check+0x32>
			BITRESET(hrcb.RELAY_STATES,RS_PC);
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <Relay_PC_Check+0xa4>)
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	f023 0301 	bic.w	r3, r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <Relay_PC_Check+0xa4>)
 80007aa:	705a      	strb	r2, [r3, #1]
			}else{
				ERR(ERR_RELAY_PC_ENG);
			}
		}
	}
}
 80007ac:	e032      	b.n	8000814 <Relay_PC_Check+0x98>
			if(BITCHECK(hrcb.RELAY_IT_IGNORE,RI_PC)){
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Relay_PC_Check+0xa4>)
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <Relay_PC_Check+0x4a>
				ERR(ERR_RELAY_PC_ENG_FAIL);
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <Relay_PC_Check+0xa4>)
 80007bc:	222c      	movs	r2, #44	; 0x2c
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	f7ff fe3a 	bl	8000438 <Err_Handler>
}
 80007c4:	e026      	b.n	8000814 <Relay_PC_Check+0x98>
				ERR(ERR_RELAY_PC_DISENG);
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <Relay_PC_Check+0xa4>)
 80007c8:	2206      	movs	r2, #6
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	f7ff fe34 	bl	8000438 <Err_Handler>
}
 80007d0:	e020      	b.n	8000814 <Relay_PC_Check+0x98>
		if (HAL_GPIO_ReadPin(RELAY_TRIGGER_PC_GPIO_Port, RELAY_TRIGGER_PC_Pin) == GPIO_PIN_SET) {
 80007d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <Relay_PC_Check+0xa0>)
 80007d8:	f002 fbd2 	bl	8002f80 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d107      	bne.n	80007f2 <Relay_PC_Check+0x76>
			BITSET(hrcb.RELAY_STATES,RS_PC);
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <Relay_PC_Check+0xa4>)
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <Relay_PC_Check+0xa4>)
 80007ee:	705a      	strb	r2, [r3, #1]
}
 80007f0:	e010      	b.n	8000814 <Relay_PC_Check+0x98>
			if(BITCHECK(hrcb.RELAY_IT_IGNORE,RI_AIRNEG)){
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <Relay_PC_Check+0xa4>)
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <Relay_PC_Check+0x8e>
				ERR(ERR_RELAY_PC_DISENG_FAIL);
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <Relay_PC_Check+0xa4>)
 8000800:	222d      	movs	r2, #45	; 0x2d
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	f7ff fe18 	bl	8000438 <Err_Handler>
}
 8000808:	e004      	b.n	8000814 <Relay_PC_Check+0x98>
				ERR(ERR_RELAY_PC_ENG);
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <Relay_PC_Check+0xa4>)
 800080c:	2205      	movs	r2, #5
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	f7ff fe12 	bl	8000438 <Err_Handler>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40010c00 	.word	0x40010c00
 800081c:	40011000 	.word	0x40011000
 8000820:	20000260 	.word	0x20000260

08000824 <HV_Check>:
void HV_Check(){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	//If 60V detected...
	if (HAL_GPIO_ReadPin(IND_60V_GPIO_Port, IND_60V_Pin) == GPIO_PIN_SET) {
 8000828:	2110      	movs	r1, #16
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <HV_Check+0x34>)
 800082c:	f002 fba8 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d107      	bne.n	8000846 <HV_Check+0x22>
		BITSET(hrcb.RELAY_STATES,RS_60V);
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HV_Check+0x38>)
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HV_Check+0x38>)
 8000842:	705a      	strb	r2, [r3, #1]
	}
	//Else if 60V not detected...
	else {
		BITRESET(hrcb.RELAY_STATES,RS_60V);
	}
}
 8000844:	e006      	b.n	8000854 <HV_Check+0x30>
		BITRESET(hrcb.RELAY_STATES,RS_60V);
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HV_Check+0x38>)
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	f023 0308 	bic.w	r3, r3, #8
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HV_Check+0x38>)
 8000852:	705a      	strb	r2, [r3, #1]
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010c00 	.word	0x40010c00
 800085c:	20000260 	.word	0x20000260

08000860 <PC_Routine_Charge_Start>:

void PC_Routine_Charge_Start(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	Status_Set(STATUS_PC_Charge);		//Enter charger pre-charge state.
 8000864:	2002      	movs	r0, #2
 8000866:	f000 f961 	bl	8000b2c <Status_Set>
	Relay_AIRNEG_SetState(CLOSE);	//Close both AIRNEG and PC relays
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fe8a 	bl	8000584 <Relay_AIRNEG_SetState>
	Relay_PC_SetState(CLOSE);
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff feb1 	bl	80005d8 <Relay_PC_SetState>

	IWDG_Delay(PRECHARGE_DELAY);	//Wait for pre-charge to happen with fixed delay.
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	f001 f839 	bl	80018f0 <IWDG_Delay>

	PC_Routine_Charge_Complete();	//Finish pre-charge.
 800087e:	f000 f803 	bl	8000888 <PC_Routine_Charge_Complete>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <PC_Routine_Charge_Complete>:
void PC_Routine_Charge_Complete(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	if(!Status_Check(STATUS_PC_Charge)){
 800088c:	2002      	movs	r0, #2
 800088e:	f000 f939 	bl	8000b04 <Status_Check>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d104      	bne.n	80008a2 <PC_Routine_Charge_Complete+0x1a>
		ERR(ERR_PC_CHARGE_COMPLETE_INVALID_ATTEMPT);
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <PC_Routine_Charge_Complete+0x3c>)
 800089a:	2223      	movs	r2, #35	; 0x23
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	f7ff fdcb 	bl	8000438 <Err_Handler>
	}
	HV_Check();							//Gets current state of 60V indicator.
 80008a2:	f7ff ffbf 	bl	8000824 <HV_Check>
	if(!BITCHECK(hrcb.RELAY_STATES,RS_60V)){	//If no 60V detected...
		//ERR(ERR_60V_DISENG_CHARGE);
	}

	Relay_AIRPOS_SetState(CLOSE);	//Close AIRPOS, bringing TS live.
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fe42 	bl	8000530 <Relay_AIRPOS_SetState>
	Relay_PC_SetState(OPEN);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe93 	bl	80005d8 <Relay_PC_SetState>
	hrcb.TS_ACTIVE = True;				//Set TS_ACTIVE flag high as TS is now on.
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <PC_Routine_Charge_Complete+0x3c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	711a      	strb	r2, [r3, #4]
	Status_Set(STATUS_Charge);			//Enter charging state.
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f937 	bl	8000b2c <Status_Set>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000260 	.word	0x20000260

080008c8 <PC_Routine_Discharge_Start>:

void PC_Routine_Discharge_Start(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	HV_Check();
 80008cc:	f7ff ffaa 	bl	8000824 <HV_Check>
	if(BITCHECK(hrcb.RELAY_STATES,RS_60V)){
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <PC_Routine_Discharge_Start+0x3c>)
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d004      	beq.n	80008e6 <PC_Routine_Discharge_Start+0x1e>
		ERR(ERR_60V_ENG)
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <PC_Routine_Discharge_Start+0x3c>)
 80008de:	2217      	movs	r2, #23
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	f7ff fda9 	bl	8000438 <Err_Handler>
	}
	Status_Set(STATUS_PC_Discharge);
 80008e6:	2004      	movs	r0, #4
 80008e8:	f000 f920 	bl	8000b2c <Status_Set>
	Relay_AIRNEG_SetState(CLOSE);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fe49 	bl	8000584 <Relay_AIRNEG_SetState>
	HAL_TIM_Base_Start_IT(&PC_TIMER_TYPE);
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <PC_Routine_Discharge_Start+0x40>)
 80008f4:	f003 f80e 	bl	8003914 <HAL_TIM_Base_Start_IT>
	Relay_PC_SetState(CLOSE);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fe6d 	bl	80005d8 <Relay_PC_SetState>

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000260 	.word	0x20000260
 8000908:	200002dc 	.word	0x200002dc

0800090c <PC_Routine_Discharge_Complete>:
void PC_Routine_Discharge_Complete(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(!Status_Check(STATUS_PC_Discharge)){
 8000910:	2004      	movs	r0, #4
 8000912:	f000 f8f7 	bl	8000b04 <Status_Check>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d104      	bne.n	8000926 <PC_Routine_Discharge_Complete+0x1a>
		ERR(ERR_PC_DISCHARGE_COMPLETE_INVALID_ATTEMPT);
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 800091e:	2222      	movs	r2, #34	; 0x22
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	f7ff fd89 	bl	8000438 <Err_Handler>
	}
	HAL_TIM_Base_Stop_IT(&PC_TIMER_TYPE);
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <PC_Routine_Discharge_Complete+0x8c>)
 8000928:	f003 f840 	bl	80039ac <HAL_TIM_Base_Stop_IT>
	hrcb.PC_DURATION = __HAL_TIM_GET_COUNTER(&PC_TIMER_TYPE);
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <PC_Routine_Discharge_Complete+0x8c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	b29a      	uxth	r2, r3
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 8000936:	80da      	strh	r2, [r3, #6]
	if(hrcb.PC_DURATION<PC_MINIMUM_DURATION){
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 800093a:	88db      	ldrh	r3, [r3, #6]
 800093c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000940:	d205      	bcs.n	800094e <PC_Routine_Discharge_Complete+0x42>
		ERR(ERR_PC_FAST)
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 8000944:	2212      	movs	r2, #18
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	f7ff fd76 	bl	8000438 <Err_Handler>
 800094c:	e00a      	b.n	8000964 <PC_Routine_Discharge_Complete+0x58>
	}else if(hrcb.PC_DURATION>PC_MAXIMUM_DURATION){
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 8000950:	88db      	ldrh	r3, [r3, #6]
 8000952:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000956:	4293      	cmp	r3, r2
 8000958:	d904      	bls.n	8000964 <PC_Routine_Discharge_Complete+0x58>
		ERR(ERR_PC_SLOW)
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 800095c:	2213      	movs	r2, #19
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	f7ff fd6a 	bl	8000438 <Err_Handler>
	}

	__HAL_TIM_SET_COUNTER(&PC_TIMER_TYPE,0x00);
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <PC_Routine_Discharge_Complete+0x8c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24

	IWDG_Delay(200);
 800096c:	20c8      	movs	r0, #200	; 0xc8
 800096e:	f000 ffbf 	bl	80018f0 <IWDG_Delay>

	HV_Check();
 8000972:	f7ff ff57 	bl	8000824 <HV_Check>
	if(!BITCHECK(hrcb.RELAY_STATES, RS_60V)){
		//ERR(ERR_60V_DISENG);
	}

	Relay_AIRPOS_SetState(CLOSE);
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fdda 	bl	8000530 <Relay_AIRPOS_SetState>
	Relay_PC_SetState(OPEN);
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fe2b 	bl	80005d8 <Relay_PC_SetState>

	hrcb.TS_ACTIVE = True;
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <PC_Routine_Discharge_Complete+0x88>)
 8000984:	2201      	movs	r2, #1
 8000986:	711a      	strb	r2, [r3, #4]
	Status_Set(STATUS_Discharge);
 8000988:	2005      	movs	r0, #5
 800098a:	f000 f8cf 	bl	8000b2c <Status_Set>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000260 	.word	0x20000260
 8000998:	200002dc 	.word	0x200002dc

0800099c <PC_Overflow>:

void PC_Overflow(){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IND_PC_GPIO_Port, IND_PC_Pin)==GPIO_PIN_RESET){
 80009a0:	2101      	movs	r1, #1
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <PC_Overflow+0x2c>)
 80009a4:	f002 faec 	bl	8002f80 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d105      	bne.n	80009ba <PC_Overflow+0x1e>
		ERR(ERR_PC_OVERFLOW_1)
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <PC_Overflow+0x30>)
 80009b0:	2214      	movs	r2, #20
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	f7ff fd40 	bl	8000438 <Err_Handler>
	}else{
		ERR(ERR_PC_OVERFLOW_2)
	}
}
 80009b8:	e004      	b.n	80009c4 <PC_Overflow+0x28>
		ERR(ERR_PC_OVERFLOW_2)
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <PC_Overflow+0x30>)
 80009bc:	2215      	movs	r2, #21
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	f7ff fd3a 	bl	8000438 <Err_Handler>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40010800 	.word	0x40010800
 80009cc:	20000260 	.word	0x20000260

080009d0 <Kill>:

void Kill(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&SOFTCLK_TIMER_TYPE);
 80009d4:	481f      	ldr	r0, [pc, #124]	; (8000a54 <Kill+0x84>)
 80009d6:	f002 ffe9 	bl	80039ac <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&PC_TIMER_TYPE);
 80009da:	481f      	ldr	r0, [pc, #124]	; (8000a58 <Kill+0x88>)
 80009dc:	f002 ffe6 	bl	80039ac <HAL_TIM_Base_Stop_IT>
	BITSET(hrcb.RELAY_IT_IGNORE, RI_AIRNEG | RI_AIRPOS | RI_PC);
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <Kill+0x8c>)
 80009e2:	789b      	ldrb	r3, [r3, #2]
 80009e4:	f043 0307 	orr.w	r3, r3, #7
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <Kill+0x8c>)
 80009ec:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(RELAY_TRIGGER_AIRPOS_GPIO_Port, RELAY_TRIGGER_AIRPOS_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <Kill+0x90>)
 80009f6:	f002 fada 	bl	8002fae <HAL_GPIO_WritePin>
	BITRESET(hrcb.RELAY_STATES,RS_AIRPOS);
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <Kill+0x8c>)
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	f023 0304 	bic.w	r3, r3, #4
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <Kill+0x8c>)
 8000a06:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(RELAY_TRIGGER_AIRNEG_GPIO_Port, RELAY_TRIGGER_AIRNEG_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <Kill+0x90>)
 8000a10:	f002 facd 	bl	8002fae <HAL_GPIO_WritePin>
	BITRESET(hrcb.RELAY_STATES,RS_AIRNEG);
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <Kill+0x8c>)
 8000a16:	785b      	ldrb	r3, [r3, #1]
 8000a18:	f023 0302 	bic.w	r3, r3, #2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <Kill+0x8c>)
 8000a20:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(RELAY_TRIGGER_PC_GPIO_Port, RELAY_TRIGGER_PC_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <Kill+0x90>)
 8000a2a:	f002 fac0 	bl	8002fae <HAL_GPIO_WritePin>
	BITRESET(hrcb.RELAY_STATES,RS_PC);
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <Kill+0x8c>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	f023 0301 	bic.w	r3, r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <Kill+0x8c>)
 8000a3a:	705a      	strb	r2, [r3, #1]
	hrcb.TS_ACTIVE = False;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <Kill+0x8c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	711a      	strb	r2, [r3, #4]

	BITRESET(hrcb.RELAY_IT_IGNORE, RI_AIRNEG | RI_AIRPOS | RI_PC);
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <Kill+0x8c>)
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	f023 0307 	bic.w	r3, r3, #7
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <Kill+0x8c>)
 8000a4e:	709a      	strb	r2, [r3, #2]
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000294 	.word	0x20000294
 8000a58:	200002dc 	.word	0x200002dc
 8000a5c:	20000260 	.word	0x20000260
 8000a60:	40011000 	.word	0x40011000

08000a64 <Shutdown>:
void Shutdown(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	BITSET(hrcb.RELAY_IT_IGNORE, RI_AIRNEG | RI_AIRPOS | RI_PC);
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <Shutdown+0x44>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	f043 0307 	orr.w	r3, r3, #7
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <Shutdown+0x44>)
 8000a74:	709a      	strb	r2, [r3, #2]

	Relay_AIRPOS_SetState(OPEN);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fd5a 	bl	8000530 <Relay_AIRPOS_SetState>
	Relay_PC_SetState(OPEN);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fdab 	bl	80005d8 <Relay_PC_SetState>
	Relay_AIRNEG_SetState(OPEN);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fd7e 	bl	8000584 <Relay_AIRNEG_SetState>
	hrcb.TS_ACTIVE = False;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <Shutdown+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	711a      	strb	r2, [r3, #4]

	BITRESET(hrcb.RELAY_IT_IGNORE, RI_AIRNEG | RI_AIRPOS | RI_PC);
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <Shutdown+0x44>)
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	f023 0307 	bic.w	r3, r3, #7
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <Shutdown+0x44>)
 8000a9a:	709a      	strb	r2, [r3, #2]

	Status_Set(STATUS_Idle);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f845 	bl	8000b2c <Status_Set>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000260 	.word	0x20000260

08000aac <TS_Request>:

void TS_Request(uint8_t request){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if(request == hrcb.TS_ACTIVE){
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <TS_Request+0x54>)
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d10d      	bne.n	8000adc <TS_Request+0x30>
		if(request){
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <TS_Request+0x26>
			ERR(ERR_TS_ENGAGE_DOUBLE_REQUEST);
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <TS_Request+0x54>)
 8000ac8:	2224      	movs	r2, #36	; 0x24
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	f7ff fcb4 	bl	8000438 <Err_Handler>
 8000ad0:	e004      	b.n	8000adc <TS_Request+0x30>
		}else{
			ERR(ERR_TS_DISENGAGE_DOUBLE_REQUEST);
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <TS_Request+0x54>)
 8000ad4:	2225      	movs	r2, #37	; 0x25
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	f7ff fcae 	bl	8000438 <Err_Handler>
		}
	}

	if(request){
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d008      	beq.n	8000af4 <TS_Request+0x48>
		if(Status_Check(STATUS_Idle)){
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 f80e 	bl	8000b04 <Status_Check>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <TS_Request+0x4c>
			PC_Routine_Discharge_Start();
 8000aee:	f7ff feeb 	bl	80008c8 <PC_Routine_Discharge_Start>
		}
	}else{
		Shutdown();
	}
}
 8000af2:	e001      	b.n	8000af8 <TS_Request+0x4c>
		Shutdown();
 8000af4:	f7ff ffb6 	bl	8000a64 <Shutdown>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000260 	.word	0x20000260

08000b04 <Status_Check>:

uint8_t Status_Check(uint8_t status){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	if(hrcb.STATUS == status){
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <Status_Check+0x24>)
 8000b10:	78db      	ldrb	r3, [r3, #3]
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d101      	bne.n	8000b1c <Status_Check+0x18>
		return True;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <Status_Check+0x1a>
	}else{
		return False;
 8000b1c:	2300      	movs	r3, #0
	}
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	20000260 	.word	0x20000260

08000b2c <Status_Set>:
uint8_t Status_Set(uint8_t status){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	if(Status_Check(STATUS_Error)){
 8000b36:	2006      	movs	r0, #6
 8000b38:	f7ff ffe4 	bl	8000b04 <Status_Check>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <Status_Set+0x1a>
		return 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e08e      	b.n	8000c64 <Status_Set+0x138>
	}
	switch(status){
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	f200 8083 	bhi.w	8000c54 <Status_Set+0x128>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <Status_Set+0x28>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000b75 	.word	0x08000b75
 8000b58:	08000b89 	.word	0x08000b89
 8000b5c:	08000bc1 	.word	0x08000bc1
 8000b60:	08000c01 	.word	0x08000c01
 8000b64:	08000be1 	.word	0x08000be1
 8000b68:	08000c21 	.word	0x08000c21
 8000b6c:	08000c49 	.word	0x08000c49
 8000b70:	08000c41 	.word	0x08000c41
	case STATUS_Startup:
		if(hrcb.STATUS!=STATUS_Startup){
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <Status_Set+0x140>)
 8000b76:	78db      	ldrb	r3, [r3, #3]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d071      	beq.n	8000c60 <Status_Set+0x134>
			ERR(ERR_STARTUP_REINIT);
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <Status_Set+0x140>)
 8000b7e:	2219      	movs	r2, #25
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	f7ff fc59 	bl	8000438 <Err_Handler>
		}
		break;
 8000b86:	e06b      	b.n	8000c60 <Status_Set+0x134>
	case STATUS_Idle:
		if(Status_Check(STATUS_Charge) || Status_Check(STATUS_Discharge) || Status_Check(STATUS_Startup)){
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f7ff ffbb 	bl	8000b04 <Status_Check>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10b      	bne.n	8000bac <Status_Set+0x80>
 8000b94:	2005      	movs	r0, #5
 8000b96:	f7ff ffb5 	bl	8000b04 <Status_Check>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d105      	bne.n	8000bac <Status_Set+0x80>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ffaf 	bl	8000b04 <Status_Check>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <Status_Set+0x88>
			hrcb.STATUS = status;
 8000bac:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <Status_Set+0x140>)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	70d3      	strb	r3, [r2, #3]
		}else{
			ERR(ERR_STATUS_IDLE_ATTEMPT);
		}
		break;
 8000bb2:	e056      	b.n	8000c62 <Status_Set+0x136>
			ERR(ERR_STATUS_IDLE_ATTEMPT);
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <Status_Set+0x140>)
 8000bb6:	221a      	movs	r2, #26
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	f7ff fc3d 	bl	8000438 <Err_Handler>
		break;
 8000bbe:	e050      	b.n	8000c62 <Status_Set+0x136>
	case STATUS_PC_Charge:
		if(Status_Check(STATUS_Idle)){
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff ff9f 	bl	8000b04 <Status_Check>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <Status_Set+0xa8>
			hrcb.STATUS = status;
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <Status_Set+0x140>)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	70d3      	strb	r3, [r2, #3]
		}else{
			ERR(ERR_STATUS_PC_CHARGE_ATTEMPT);
		}
		break;
 8000bd2:	e046      	b.n	8000c62 <Status_Set+0x136>
			ERR(ERR_STATUS_PC_CHARGE_ATTEMPT);
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <Status_Set+0x140>)
 8000bd6:	221b      	movs	r2, #27
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	f7ff fc2d 	bl	8000438 <Err_Handler>
		break;
 8000bde:	e040      	b.n	8000c62 <Status_Set+0x136>
	case STATUS_PC_Discharge:
		if(Status_Check(STATUS_Idle)){
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff ff8f 	bl	8000b04 <Status_Check>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <Status_Set+0xc8>
			hrcb.STATUS = status;
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <Status_Set+0x140>)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	70d3      	strb	r3, [r2, #3]
		}else{
			ERR(ERR_STATUS_PC_DISCHARGE_ATTEMPT);
		}
		break;
 8000bf2:	e036      	b.n	8000c62 <Status_Set+0x136>
			ERR(ERR_STATUS_PC_DISCHARGE_ATTEMPT);
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <Status_Set+0x140>)
 8000bf6:	221c      	movs	r2, #28
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	f7ff fc1d 	bl	8000438 <Err_Handler>
		break;
 8000bfe:	e030      	b.n	8000c62 <Status_Set+0x136>
	case STATUS_Charge:
		if(Status_Check(STATUS_PC_Charge)){
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff ff7f 	bl	8000b04 <Status_Check>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <Status_Set+0xe8>
			hrcb.STATUS = status;
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <Status_Set+0x140>)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	70d3      	strb	r3, [r2, #3]
		}else{
			ERR(ERR_STATUS_CHARGE_ATTEMPT);
		}
		break;
 8000c12:	e026      	b.n	8000c62 <Status_Set+0x136>
			ERR(ERR_STATUS_CHARGE_ATTEMPT);
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <Status_Set+0x140>)
 8000c16:	221d      	movs	r2, #29
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	f7ff fc0d 	bl	8000438 <Err_Handler>
		break;
 8000c1e:	e020      	b.n	8000c62 <Status_Set+0x136>
	case STATUS_Discharge:
		if(Status_Check(STATUS_PC_Discharge)){
 8000c20:	2004      	movs	r0, #4
 8000c22:	f7ff ff6f 	bl	8000b04 <Status_Check>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <Status_Set+0x108>
			hrcb.STATUS = status;
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <Status_Set+0x140>)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	70d3      	strb	r3, [r2, #3]
		}else{
			ERR(ERR_STATUS_DISCHARGE_ATTEMPT);
		}
		break;
 8000c32:	e016      	b.n	8000c62 <Status_Set+0x136>
			ERR(ERR_STATUS_DISCHARGE_ATTEMPT);
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <Status_Set+0x140>)
 8000c36:	221e      	movs	r2, #30
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	f7ff fbfd 	bl	8000438 <Err_Handler>
		break;
 8000c3e:	e010      	b.n	8000c62 <Status_Set+0x136>
	case STATUS_Override:
		if(OVERRIDE_EN){
			hrcb.STATUS = status;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <Status_Set+0x140>)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	70d3      	strb	r3, [r2, #3]
		}else{
			ERR(ERR_STATUS_OVERRIDE_ATTEMPT);
		}
		break;
 8000c46:	e00c      	b.n	8000c62 <Status_Set+0x136>
	case STATUS_Error:
		ERR(ERR_STATUS_INVALID_ERROR_USAGE);	//ERRORS SHOULD ONLY BE CALLED VIA ERR() MACRO.
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <Status_Set+0x140>)
 8000c4a:	2221      	movs	r2, #33	; 0x21
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	f7ff fbf3 	bl	8000438 <Err_Handler>
		break;
 8000c52:	e006      	b.n	8000c62 <Status_Set+0x136>
	default:
		ERR(ERR_STATUS_INVALID_ATTEMPT);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <Status_Set+0x140>)
 8000c56:	2220      	movs	r2, #32
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	f7ff fbed 	bl	8000438 <Err_Handler>
		break;
 8000c5e:	e000      	b.n	8000c62 <Status_Set+0x136>
		break;
 8000c60:	bf00      	nop
	}
	return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000260 	.word	0x20000260

08000c70 <CAN_Transmit_State>:

void CAN_Transmit_State(){
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af06      	add	r7, sp, #24
	CAN_UTIL_SetData(	CAN_TX_STATE,
						hrcb.TS_ACTIVE*0x55,
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <CAN_Transmit_State+0x64>)
 8000c78:	791b      	ldrb	r3, [r3, #4]
	CAN_UTIL_SetData(	CAN_TX_STATE,
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	0111      	lsls	r1, r2, #4
 8000c84:	461a      	mov	r2, r3
 8000c86:	460b      	mov	r3, r1
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2d8      	uxtb	r0, r3
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <CAN_Transmit_State+0x64>)
 8000c8e:	785c      	ldrb	r4, [r3, #1]
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <CAN_Transmit_State+0x64>)
 8000c92:	78dd      	ldrb	r5, [r3, #3]
						hrcb.RELAY_STATES,
						hrcb.STATUS,
						BYTE1(hrcb.PC_DURATION),
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <CAN_Transmit_State+0x64>)
 8000c96:	88db      	ldrh	r3, [r3, #6]
	CAN_UTIL_SetData(	CAN_TX_STATE,
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
						BYTE0(hrcb.PC_DURATION),
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <CAN_Transmit_State+0x64>)
 8000ca0:	88d2      	ldrh	r2, [r2, #6]
	CAN_UTIL_SetData(	CAN_TX_STATE,
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <CAN_Transmit_State+0x64>)
 8000ca6:	7809      	ldrb	r1, [r1, #0]
 8000ca8:	2600      	movs	r6, #0
 8000caa:	9604      	str	r6, [sp, #16]
 8000cac:	2600      	movs	r6, #0
 8000cae:	9603      	str	r6, [sp, #12]
 8000cb0:	9102      	str	r1, [sp, #8]
 8000cb2:	9201      	str	r2, [sp, #4]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	4622      	mov	r2, r4
 8000cba:	4601      	mov	r1, r0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fad5 	bl	800026c <CAN_UTIL_SetData>
						hrcb.ERR_STATE,
						0,
						0);
	CAN_UTIL_Transmit(&hcan, CAN_TX_STATE);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <CAN_Transmit_State+0x68>)
 8000cc6:	f7ff fa65 	bl	8000194 <CAN_UTIL_Transmit>
}
 8000cca:	bf00      	nop
 8000ccc:	3704      	adds	r7, #4
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000260 	.word	0x20000260
 8000cd8:	2000026c 	.word	0x2000026c

08000cdc <Startup>:

void Startup(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_TRIGGER_AIRNEG_GPIO_Port, RELAY_TRIGGER_AIRNEG_Pin, GPIO_PIN_RESET);	//Trigger relay.
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce6:	481c      	ldr	r0, [pc, #112]	; (8000d58 <Startup+0x7c>)
 8000ce8:	f002 f961 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_TRIGGER_AIRPOS_GPIO_Port, RELAY_TRIGGER_AIRPOS_Pin, GPIO_PIN_RESET);	//Trigger relay.
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4819      	ldr	r0, [pc, #100]	; (8000d58 <Startup+0x7c>)
 8000cf4:	f002 f95b 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_TRIGGER_PC_GPIO_Port, RELAY_TRIGGER_PC_Pin, GPIO_PIN_RESET);	//Trigger relay.
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <Startup+0x7c>)
 8000d00:	f002 f955 	bl	8002fae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2108      	movs	r1, #8
 8000d08:	4814      	ldr	r0, [pc, #80]	; (8000d5c <Startup+0x80>)
 8000d0a:	f002 f950 	bl	8002fae <HAL_GPIO_WritePin>
	IWDG_Delay(200);
 8000d0e:	20c8      	movs	r0, #200	; 0xc8
 8000d10:	f000 fdee 	bl	80018f0 <IWDG_Delay>
	HAL_GPIO_WritePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <Startup+0x80>)
 8000d1a:	f002 f948 	bl	8002fae <HAL_GPIO_WritePin>
	IWDG_Delay(200);
 8000d1e:	20c8      	movs	r0, #200	; 0xc8
 8000d20:	f000 fde6 	bl	80018f0 <IWDG_Delay>
	HAL_GPIO_WritePin(LED_OKAY_GPIO_Port, LED_OKAY_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2120      	movs	r1, #32
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <Startup+0x80>)
 8000d2a:	f002 f940 	bl	8002fae <HAL_GPIO_WritePin>
	IWDG_Delay(400);
 8000d2e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d32:	f000 fddd 	bl	80018f0 <IWDG_Delay>
	HAL_GPIO_WritePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2108      	movs	r1, #8
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <Startup+0x80>)
 8000d3c:	f002 f937 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <Startup+0x80>)
 8000d46:	f002 f932 	bl	8002fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_OKAY_GPIO_Port, LED_OKAY_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	4803      	ldr	r0, [pc, #12]	; (8000d5c <Startup+0x80>)
 8000d50:	f002 f92d 	bl	8002fae <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40010800 	.word	0x40010800

08000d60 <Debounce_Power>:

void Debounce_Power(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
//		ERR(ERR_NO_PWR_FAN1);
//	}
//	if(HAL_GPIO_ReadPin(IND_PWR_FAN2_GPIO_Port, IND_PWR_FAN2_Pin)==GPIO_PIN_RESET){
//		ERR(ERR_NO_PWR_FAN2);
//	}
	if(HAL_GPIO_ReadPin(IND_PWR_IMD_GPIO_Port, IND_PWR_IMD_Pin)==GPIO_PIN_RESET){
 8000d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <Debounce_Power+0x24>)
 8000d6a:	f002 f909 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d104      	bne.n	8000d7e <Debounce_Power+0x1e>
		ERR(ERR_NO_PWR_IMD);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <Debounce_Power+0x28>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	f7ff fb5d 	bl	8000438 <Err_Handler>
	}
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	20000260 	.word	0x20000260

08000d8c <Debounce_TS>:
void Debounce_TS(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	uint8_t request = HAL_GPIO_ReadPin(REQUEST_TS_GPIO_Port, REQUEST_TS_Pin);
 8000d92:	2108      	movs	r1, #8
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <Debounce_TS+0x44>)
 8000d96:	f002 f8f3 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	if(hrcb.TS_ACTIVE && (!request)){
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <Debounce_TS+0x48>)
 8000da0:	791b      	ldrb	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <Debounce_TS+0x28>
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d103      	bne.n	8000db4 <Debounce_TS+0x28>
		TS_Request(False);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fe7d 	bl	8000aac <TS_Request>
	}else if((!hrcb.TS_ACTIVE) && request){
		TS_Request(True);
	}
}
 8000db2:	e009      	b.n	8000dc8 <Debounce_TS+0x3c>
	}else if((!hrcb.TS_ACTIVE) && request){
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <Debounce_TS+0x48>)
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <Debounce_TS+0x3c>
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <Debounce_TS+0x3c>
		TS_Request(True);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff fe72 	bl	8000aac <TS_Request>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	20000260 	.word	0x20000260

08000dd8 <Debounce_PC>:
void Debounce_PC(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IND_PC_GPIO_Port, IND_PC_Pin)==GPIO_PIN_RESET){
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <Debounce_PC+0x1c>)
 8000de0:	f002 f8ce 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <Debounce_PC+0x16>
		PC_Routine_Discharge_Complete();
 8000dea:	f7ff fd8f 	bl	800090c <PC_Routine_Discharge_Complete>
	}
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800

08000df8 <Debounce_Relays>:
void Debounce_Relays(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	Relay_AIRNEG_Check();
 8000dfc:	f7ff fc6a 	bl	80006d4 <Relay_AIRNEG_Check>
	Relay_AIRPOS_Check();
 8000e00:	f7ff fc14 	bl	800062c <Relay_AIRPOS_Check>
	Relay_PC_Check();
 8000e04:	f7ff fcba 	bl	800077c <Relay_PC_Check>
	HV_Check();
 8000e08:	f7ff fd0c 	bl	8000824 <HV_Check>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DevCon_Charger>:

void DevCon_Charger(uint8_t state){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	if(state){
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00a      	beq.n	8000e36 <DevCon_Charger+0x26>
		hrcb.DEVCON_CHARGER = True;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <DevCon_Charger+0x38>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	721a      	strb	r2, [r3, #8]
		ScheduleTask(SCH_DEVCON_CHARGER, 3000, 0, 0);
 8000e26:	2300      	movs	r3, #0
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000e2e:	2009      	movs	r0, #9
 8000e30:	f000 fc7a 	bl	8001728 <ScheduleTask>
	}else{
		ERR(ERR_DEVCON_CHARGER_LOST);
	}
}
 8000e34:	e004      	b.n	8000e40 <DevCon_Charger+0x30>
		ERR(ERR_DEVCON_CHARGER_LOST);
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <DevCon_Charger+0x38>)
 8000e38:	2226      	movs	r2, #38	; 0x26
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	f7ff fafc 	bl	8000438 <Err_Handler>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000260 	.word	0x20000260

08000e4c <DevCon_Override>:

void DevCon_Override(uint8_t state){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	if(state){
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00a      	beq.n	8000e72 <DevCon_Override+0x26>
		hrcb.DEVCON_OVERRIDE = True;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <DevCon_Override+0x38>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	725a      	strb	r2, [r3, #9]
		ScheduleTask(SCH_DEVCON_OVERRIDE, 1000, 0, 0);
 8000e62:	2300      	movs	r3, #0
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f000 fc5c 	bl	8001728 <ScheduleTask>
	}else{
		ERR(ERR_DEVCON_OVERRIDE_LOST);
	}
}
 8000e70:	e004      	b.n	8000e7c <DevCon_Override+0x30>
		ERR(ERR_DEVCON_OVERRIDE_LOST);
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <DevCon_Override+0x38>)
 8000e74:	2227      	movs	r2, #39	; 0x27
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	f7ff fade 	bl	8000438 <Err_Handler>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000260 	.word	0x20000260

08000e88 <TaskScheduleHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskScheduleHandler(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
SCHEDULE_HANDLE(SCH_LED_FAULT)
 8000e8c:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000e8e:	7c1b      	ldrb	r3, [r3, #16]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <TaskScheduleHandler+0x1a>
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_TogglePin(LED_FAULT_GPIO_Port, LED_FAULT_Pin);
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	484e      	ldr	r0, [pc, #312]	; (8000fd8 <TaskScheduleHandler+0x150>)
 8000e9e:	f002 f89e 	bl	8002fde <HAL_GPIO_TogglePin>
}
SCHEDULE_HANDLE(SCH_LED_INDICATOR)
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000ea4:	7f1b      	ldrb	r3, [r3, #28]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <TaskScheduleHandler+0x30>
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	771a      	strb	r2, [r3, #28]
	HAL_GPIO_TogglePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin);
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4849      	ldr	r0, [pc, #292]	; (8000fd8 <TaskScheduleHandler+0x150>)
 8000eb4:	f002 f893 	bl	8002fde <HAL_GPIO_TogglePin>
}
SCHEDULE_HANDLE(SCH_LED_OKAY)
 8000eb8:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <TaskScheduleHandler+0x4a>
 8000ec2:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	HAL_GPIO_TogglePin(LED_OKAY_GPIO_Port, LED_OKAY_Pin);
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4842      	ldr	r0, [pc, #264]	; (8000fd8 <TaskScheduleHandler+0x150>)
 8000ece:	f002 f886 	bl	8002fde <HAL_GPIO_TogglePin>
}
SCHEDULE_HANDLE(SCH_CAN_STATE)
 8000ed2:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000ed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <TaskScheduleHandler+0x60>
 8000edc:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	CAN_Transmit_State();
 8000ee4:	f7ff fec4 	bl	8000c70 <CAN_Transmit_State>
}
SCHEDULE_HANDLE(SCH_DEBOUNCE_RELAYS)
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <TaskScheduleHandler+0x76>
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Debounce_Relays();
 8000efa:	f7ff ff7d 	bl	8000df8 <Debounce_Relays>
}
SCHEDULE_HANDLE(SCH_DEBOUNCE_PC)
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <TaskScheduleHandler+0x8c>
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Debounce_PC();
 8000f10:	f7ff ff62 	bl	8000dd8 <Debounce_PC>
}
SCHEDULE_HANDLE(SCH_DEBOUNCE_TS_REQUEST)
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <TaskScheduleHandler+0xa2>
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Debounce_TS();
 8000f26:	f7ff ff31 	bl	8000d8c <Debounce_TS>
}
SCHEDULE_HANDLE(SCH_DEBOUNCE_PWR)
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f2c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <TaskScheduleHandler+0xb8>
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	Debounce_Power();
 8000f3c:	f7ff ff10 	bl	8000d60 <Debounce_Power>
}
SCHEDULE_HANDLE(SCH_DEVCON_CHARGER)
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <TaskScheduleHandler+0xd0>
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	DevCon_Charger(False);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ff5c 	bl	8000e10 <DevCon_Charger>
}
SCHEDULE_HANDLE(SCH_DEVCON_OVERRIDE)
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <TaskScheduleHandler+0xe8>
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	DevCon_Override(False);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff6e 	bl	8000e4c <DevCon_Override>
}
SCHEDULE_HANDLE(SCH_CHARGER_CHECK)
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f72:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d012      	beq.n	8000fa0 <TaskScheduleHandler+0x118>
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	if(Status_Check(STATUS_Idle)){
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fdbe 	bl	8000b04 <Status_Check>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d008      	beq.n	8000fa0 <TaskScheduleHandler+0x118>
		if(hrcb.DEVCON_CHARGER){
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <TaskScheduleHandler+0x154>)
 8000f90:	7a1b      	ldrb	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <TaskScheduleHandler+0x118>
			ScheduleTaskStop(SCH_CHARGER_CHECK);
 8000f96:	200b      	movs	r0, #11
 8000f98:	f000 fc28 	bl	80017ec <ScheduleTaskStop>
			PC_Routine_Charge_Start();
 8000f9c:	f7ff fc60 	bl	8000860 <PC_Routine_Charge_Start>
		}
	}
}
SCHEDULE_HANDLE(SCH_COMPLETE_STARTUP)
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000fa2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <TaskScheduleHandler+0x130>
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	STARTUP_COMPLETE = True;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <TaskScheduleHandler+0x158>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
}
SCHEDULE_HANDLE(SCH_PC_OVERFLOW)
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000fba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <TaskScheduleHandler+0x146>
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <TaskScheduleHandler+0x14c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	PC_Overflow();
 8000fca:	f7ff fce7 	bl	800099c <PC_Overflow>
}
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000378 	.word	0x20000378
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	20000260 	.word	0x20000260
 8000fe0:	20000368 	.word	0x20000368

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fe6e 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f84e 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f9ba 	bl	8001368 <MX_GPIO_Init>
  MX_CAN_Init();
 8000ff4:	f000 f890 	bl	8001118 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000ff8:	f000 f98c 	bl	8001314 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ffc:	f000 f8ec 	bl	80011d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001000:	f000 f93a 	bl	8001278 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start CAN
  HAL_CAN_Start(&hcan);
 8001004:	481e      	ldr	r0, [pc, #120]	; (8001080 <main+0x9c>)
 8001006:	f001 f8a9 	bl	800215c <HAL_CAN_Start>
  if(hcan.State!=HAL_CAN_STATE_LISTENING){
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <main+0x9c>)
 800100c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d001      	beq.n	800101a <main+0x36>
	  HAL_NVIC_SystemReset();
 8001016:	f001 fe26 	bl	8002c66 <HAL_NVIC_SystemReset>
  }
  HAL_TIM_Base_Start_IT(&SOFTCLK_TIMER_TYPE);
 800101a:	481a      	ldr	r0, [pc, #104]	; (8001084 <main+0xa0>)
 800101c:	f002 fc7a 	bl	8003914 <HAL_TIM_Base_Start_IT>


  hrcb.STATUS = STATUS_Startup;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <main+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	70da      	strb	r2, [r3, #3]
  // Activate interrupts for the TX Mailbox Empty and for an incoming message
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING);
 8001026:	2103      	movs	r1, #3
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <main+0x9c>)
 800102a:	f001 fac6 	bl	80025ba <HAL_CAN_ActivateNotification>

  CAN_UTIL_Setup(CAN_TX_STATE, 0x00000A84, 8);
 800102e:	2208      	movs	r2, #8
 8001030:	f640 2184 	movw	r1, #2692	; 0xa84
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff f901 	bl	800023c <CAN_UTIL_Setup>

  Startup();
 800103a:	f7ff fe4f 	bl	8000cdc <Startup>

  ScheduleTask(SCH_CAN_STATE, 500, True, 0);
 800103e:	2300      	movs	r3, #0
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001046:	2004      	movs	r0, #4
 8001048:	f000 fb6e 	bl	8001728 <ScheduleTask>

  Input_Check();
 800104c:	f7ff fa02 	bl	8000454 <Input_Check>

  Status_Set(STATUS_Idle);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff fd6b 	bl	8000b2c <Status_Set>

  ScheduleTask(SCH_CHARGER_CHECK, 1000, True, 0);
 8001056:	2300      	movs	r3, #0
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800105e:	200b      	movs	r0, #11
 8001060:	f000 fb62 	bl	8001728 <ScheduleTask>

  ScheduleTask(SCH_COMPLETE_STARTUP, 1200, False, 0);
 8001064:	2300      	movs	r3, #0
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800106c:	200c      	movs	r0, #12
 800106e:	f000 fb5b 	bl	8001728 <ScheduleTask>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CAN_RX_Handler();
 8001072:	f7ff f86b 	bl	800014c <CAN_RX_Handler>
	  TaskScheduleSoftClock();
 8001076:	f000 fbc9 	bl	800180c <TaskScheduleSoftClock>
	  TaskScheduleHandler();
 800107a:	f7ff ff05 	bl	8000e88 <TaskScheduleHandler>
	  CAN_RX_Handler();
 800107e:	e7f8      	b.n	8001072 <main+0x8e>
 8001080:	2000026c 	.word	0x2000026c
 8001084:	20000294 	.word	0x20000294
 8001088:	20000260 	.word	0x20000260

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b090      	sub	sp, #64	; 0x40
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2228      	movs	r2, #40	; 0x28
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f904 	bl	80042a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 ffb3 	bl	8003040 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010e0:	f000 fb1c 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2302      	movs	r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fa20 	bl	8003544 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800110a:	f000 fb07 	bl	800171c <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3740      	adds	r7, #64	; 0x40
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_CAN_Init+0xb4>)
 8001120:	4a2b      	ldr	r2, [pc, #172]	; (80011d0 <MX_CAN_Init+0xb8>)
 8001122:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_CAN_Init+0xb4>)
 8001126:	2204      	movs	r2, #4
 8001128:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_CAN_Init+0xb4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_CAN_Init+0xb4>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_CAN_Init+0xb4>)
 8001138:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_CAN_Init+0xb4>)
 8001140:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001144:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_CAN_Init+0xb4>)
 8001148:	2200      	movs	r2, #0
 800114a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_CAN_Init+0xb4>)
 800114e:	2200      	movs	r2, #0
 8001150:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_CAN_Init+0xb4>)
 8001154:	2200      	movs	r2, #0
 8001156:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_CAN_Init+0xb4>)
 800115a:	2200      	movs	r2, #0
 800115c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_CAN_Init+0xb4>)
 8001160:	2200      	movs	r2, #0
 8001162:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_CAN_Init+0xb4>)
 8001166:	2200      	movs	r2, #0
 8001168:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_CAN_Init+0xb4>)
 800116c:	f000 fe32 	bl	8001dd4 <HAL_CAN_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001176:	f000 fad1 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef CAN_Filter;
  CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  CAN_Filter.FilterBank = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001186:	2301      	movs	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
  CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]

  uint32_t filter_id = 	 0x18FF50E5;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_CAN_Init+0xbc>)
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t filter_mask = 0x1FFFFFFF;
 8001192:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28

  CAN_Filter.FilterIdHigh = filter_id >> 13 & 0xFFFF;
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	0b5b      	lsrs	r3, r3, #13
 800119c:	b29b      	uxth	r3, r3
 800119e:	603b      	str	r3, [r7, #0]
  CAN_Filter.FilterIdLow = filter_id << 3 & 0xFFF8;
 80011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	607b      	str	r3, [r7, #4]
  CAN_Filter.FilterMaskIdHigh = filter_mask >> 13 & 0xFFFF;
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	0b5b      	lsrs	r3, r3, #13
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	60bb      	str	r3, [r7, #8]
  CAN_Filter.FilterMaskIdLow = filter_mask << 3 & 0xFFF8;
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	60fb      	str	r3, [r7, #12]

  HAL_CAN_ConfigFilter(&hcan, &CAN_Filter);
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_CAN_Init+0xb4>)
 80011be:	f000 ff04 	bl	8001fca <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000026c 	.word	0x2000026c
 80011d0:	40006400 	.word	0x40006400
 80011d4:	18ff50e5 	.word	0x18ff50e5

080011d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_TIM1_Init+0x98>)
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <MX_TIM1_Init+0x9c>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_TIM1_Init+0x98>)
 80011fc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001200:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_TIM1_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_TIM1_Init+0x98>)
 800120a:	2263      	movs	r2, #99	; 0x63
 800120c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_TIM1_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_TIM1_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_TIM1_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <MX_TIM1_Init+0x98>)
 8001222:	f002 fb27 	bl	8003874 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800122c:	f000 fa76 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_TIM1_Init+0x98>)
 800123e:	f002 fceb 	bl	8003c18 <HAL_TIM_ConfigClockSource>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001248:	f000 fa68 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_TIM1_Init+0x98>)
 800125a:	f002 feb3 	bl	8003fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001264:	f000 fa5a 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000294 	.word	0x20000294
 8001274:	40012c00 	.word	0x40012c00

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM2_Init+0x98>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM2_Init+0x98>)
 800129e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80012a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM2_Init+0x98>)
 80012ac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80012b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM2_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM2_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM2_Init+0x98>)
 80012c0:	f002 fad8 	bl	8003874 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ca:	f000 fa27 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM2_Init+0x98>)
 80012dc:	f002 fc9c 	bl	8003c18 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012e6:	f000 fa19 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM2_Init+0x98>)
 80012f8:	f002 fe64 	bl	8003fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001302:	f000 fa0b 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002dc 	.word	0x200002dc

08001314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART1_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800134c:	f002 fea4 	bl	8004098 <HAL_HalfDuplex_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f9e1 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000324 	.word	0x20000324
 8001364:	40013800 	.word	0x40013800

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <MX_GPIO_Init+0x180>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a59      	ldr	r2, [pc, #356]	; (80014e8 <MX_GPIO_Init+0x180>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <MX_GPIO_Init+0x180>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	4b54      	ldr	r3, [pc, #336]	; (80014e8 <MX_GPIO_Init+0x180>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a53      	ldr	r2, [pc, #332]	; (80014e8 <MX_GPIO_Init+0x180>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a4d      	ldr	r2, [pc, #308]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x180>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_TRIGGER_AIRPOS_Pin|RELAY_TRIGGER_AIRNEG_Pin|RELAY_TRIGGER_PC_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80013e2:	4842      	ldr	r0, [pc, #264]	; (80014ec <MX_GPIO_Init+0x184>)
 80013e4:	f001 fde3 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_FAULT_Pin|LED_INDICATOR_Pin|LED_OKAY_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2138      	movs	r1, #56	; 0x38
 80013ec:	4840      	ldr	r0, [pc, #256]	; (80014f0 <MX_GPIO_Init+0x188>)
 80013ee:	f001 fdde 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_TRIGGER_AIRPOS_Pin RELAY_TRIGGER_AIRNEG_Pin RELAY_TRIGGER_PC_Pin */
  GPIO_InitStruct.Pin = RELAY_TRIGGER_AIRPOS_Pin|RELAY_TRIGGER_AIRNEG_Pin|RELAY_TRIGGER_PC_Pin;
 80013f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2302      	movs	r3, #2
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	4838      	ldr	r0, [pc, #224]	; (80014ec <MX_GPIO_Init+0x184>)
 800140c:	f001 fc3c 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : IND_PC_Pin */
  GPIO_InitStruct.Pin = IND_PC_Pin;
 8001410:	2301      	movs	r3, #1
 8001412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001414:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <MX_GPIO_Init+0x18c>)
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IND_PC_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4833      	ldr	r0, [pc, #204]	; (80014f0 <MX_GPIO_Init+0x188>)
 8001424:	f001 fc30 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_FAULT_Pin LED_INDICATOR_Pin LED_OKAY_Pin */
  GPIO_InitStruct.Pin = LED_FAULT_Pin|LED_INDICATOR_Pin|LED_OKAY_Pin;
 8001428:	2338      	movs	r3, #56	; 0x38
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4619      	mov	r1, r3
 800143e:	482c      	ldr	r0, [pc, #176]	; (80014f0 <MX_GPIO_Init+0x188>)
 8001440:	f001 fc22 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_PWR_FAN1_Pin IND_PWR_FAN2_Pin IND_PWR_IMD_Pin */
  GPIO_InitStruct.Pin = IND_PWR_FAN1_Pin|IND_PWR_FAN2_Pin|IND_PWR_IMD_Pin;
 8001444:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <MX_GPIO_Init+0x18c>)
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4619      	mov	r1, r3
 8001458:	4827      	ldr	r0, [pc, #156]	; (80014f8 <MX_GPIO_Init+0x190>)
 800145a:	f001 fc15 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : REQUEST_TS_Pin */
  GPIO_InitStruct.Pin = REQUEST_TS_Pin;
 800145e:	2308      	movs	r3, #8
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_GPIO_Init+0x194>)
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REQUEST_TS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	4821      	ldr	r0, [pc, #132]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001472:	f001 fc09 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_60V_Pin RELAY_AUX_AIRPOS_Pin RELAY_AUX_AIRNEG_Pin RELAY_AUX_PC_Pin */
  GPIO_InitStruct.Pin = IND_60V_Pin|RELAY_AUX_AIRPOS_Pin|RELAY_AUX_AIRNEG_Pin|RELAY_AUX_PC_Pin;
 8001476:	23f0      	movs	r3, #240	; 0xf0
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_GPIO_Init+0x18c>)
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	481b      	ldr	r0, [pc, #108]	; (80014f8 <MX_GPIO_Init+0x190>)
 800148a:	f001 fbfd 	bl	8002c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2006      	movs	r0, #6
 8001494:	f001 fbbd 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001498:	2006      	movs	r0, #6
 800149a:	f001 fbd6 	bl	8002c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2009      	movs	r0, #9
 80014a4:	f001 fbb5 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014a8:	2009      	movs	r0, #9
 80014aa:	f001 fbce 	bl	8002c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	200a      	movs	r0, #10
 80014b4:	f001 fbad 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f001 fbc6 	bl	8002c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2017      	movs	r0, #23
 80014c4:	f001 fba5 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c8:	2017      	movs	r0, #23
 80014ca:	f001 fbbe 	bl	8002c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f001 fb9d 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d8:	2028      	movs	r0, #40	; 0x28
 80014da:	f001 fbb6 	bl	8002c4a <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	10110000 	.word	0x10110000
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	10310000 	.word	0x10310000

08001500 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if (htim == &SOFTCLK_TIMER_TYPE) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d102      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x16>
		TaskScheduleSoftClock_FlagSet();
 8001510:	f000 f9e2 	bl	80018d8 <TaskScheduleSoftClock_FlagSet>
			ScheduleTask(SCH_PC_OVERFLOW, 0, False, 0);
		}else{
			INITIAL_PC = True;
		}
	}
}
 8001514:	e011      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0x3a>
	}else if(htim == &PC_TIMER_TYPE){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10d      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(INITIAL_PC==True){
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_TIM_PeriodElapsedCallback+0x34>
			ScheduleTask(SCH_PC_OVERFLOW, 0, False, 0);
 8001526:	2300      	movs	r3, #0
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	200d      	movs	r0, #13
 800152e:	f000 f8fb 	bl	8001728 <ScheduleTask>
}
 8001532:	e002      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0x3a>
			INITIAL_PC = True;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000294 	.word	0x20000294
 8001548:	200002dc 	.word	0x200002dc
 800154c:	20000369 	.word	0x20000369

08001550 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	if(Status_Check(STATUS_Startup)){
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fad2 	bl	8000b04 <Status_Check>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80c8 	bne.w	80016f8 <HAL_GPIO_EXTI_Callback+0x1a8>
		return;
	}
	if(Status_Check(STATUS_Error)){
 8001568:	2006      	movs	r0, #6
 800156a:	f7ff facb 	bl	8000b04 <Status_Check>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 80c3 	bne.w	80016fc <HAL_GPIO_EXTI_Callback+0x1ac>
		return;
	}
	if(STARTUP_COMPLETE==False){
 8001576:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80c0 	beq.w	8001700 <HAL_GPIO_EXTI_Callback+0x1b0>
		return;
	}
	switch(GPIO_Pin){
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001586:	d074      	beq.n	8001672 <HAL_GPIO_EXTI_Callback+0x122>
 8001588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158c:	f300 80bf 	bgt.w	800170e <HAL_GPIO_EXTI_Callback+0x1be>
 8001590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001594:	d066      	beq.n	8001664 <HAL_GPIO_EXTI_Callback+0x114>
 8001596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159a:	f300 80b8 	bgt.w	800170e <HAL_GPIO_EXTI_Callback+0x1be>
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a2:	d058      	beq.n	8001656 <HAL_GPIO_EXTI_Callback+0x106>
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	f300 80b1 	bgt.w	800170e <HAL_GPIO_EXTI_Callback+0x1be>
 80015ac:	2b80      	cmp	r3, #128	; 0x80
 80015ae:	f000 808f 	beq.w	80016d0 <HAL_GPIO_EXTI_Callback+0x180>
 80015b2:	2b80      	cmp	r3, #128	; 0x80
 80015b4:	f300 80ab 	bgt.w	800170e <HAL_GPIO_EXTI_Callback+0x1be>
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	dc49      	bgt.n	8001650 <HAL_GPIO_EXTI_Callback+0x100>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f340 80a6 	ble.w	800170e <HAL_GPIO_EXTI_Callback+0x1be>
 80015c2:	3b01      	subs	r3, #1
 80015c4:	2b1f      	cmp	r3, #31
 80015c6:	f200 80a2 	bhi.w	800170e <HAL_GPIO_EXTI_Callback+0x1be>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <HAL_GPIO_EXTI_Callback+0x80>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	08001681 	.word	0x08001681
 80015d4:	0800170f 	.word	0x0800170f
 80015d8:	0800170f 	.word	0x0800170f
 80015dc:	0800170f 	.word	0x0800170f
 80015e0:	0800170f 	.word	0x0800170f
 80015e4:	0800170f 	.word	0x0800170f
 80015e8:	0800170f 	.word	0x0800170f
 80015ec:	0800168f 	.word	0x0800168f
 80015f0:	0800170f 	.word	0x0800170f
 80015f4:	0800170f 	.word	0x0800170f
 80015f8:	0800170f 	.word	0x0800170f
 80015fc:	0800170f 	.word	0x0800170f
 8001600:	0800170f 	.word	0x0800170f
 8001604:	0800170f 	.word	0x0800170f
 8001608:	0800170f 	.word	0x0800170f
 800160c:	080016eb 	.word	0x080016eb
 8001610:	0800170f 	.word	0x0800170f
 8001614:	0800170f 	.word	0x0800170f
 8001618:	0800170f 	.word	0x0800170f
 800161c:	0800170f 	.word	0x0800170f
 8001620:	0800170f 	.word	0x0800170f
 8001624:	0800170f 	.word	0x0800170f
 8001628:	0800170f 	.word	0x0800170f
 800162c:	0800170f 	.word	0x0800170f
 8001630:	0800170f 	.word	0x0800170f
 8001634:	0800170f 	.word	0x0800170f
 8001638:	0800170f 	.word	0x0800170f
 800163c:	0800170f 	.word	0x0800170f
 8001640:	0800170f 	.word	0x0800170f
 8001644:	0800170f 	.word	0x0800170f
 8001648:	0800170f 	.word	0x0800170f
 800164c:	080016b7 	.word	0x080016b7
 8001650:	2b40      	cmp	r3, #64	; 0x40
 8001652:	d023      	beq.n	800169c <HAL_GPIO_EXTI_Callback+0x14c>
 8001654:	e05b      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
	case IND_PWR_FAN1_Pin:
		ScheduleTask(SCH_DEBOUNCE_PWR, DEBOUNCE_PERIOD, 0, 0);
 8001656:	2300      	movs	r3, #0
 8001658:	2200      	movs	r2, #0
 800165a:	2105      	movs	r1, #5
 800165c:	2008      	movs	r0, #8
 800165e:	f000 f863 	bl	8001728 <ScheduleTask>
		break;
 8001662:	e054      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
	case IND_PWR_FAN2_Pin:
		ScheduleTask(SCH_DEBOUNCE_PWR, DEBOUNCE_PERIOD, 0, 0);
 8001664:	2300      	movs	r3, #0
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	2008      	movs	r0, #8
 800166c:	f000 f85c 	bl	8001728 <ScheduleTask>
		break;
 8001670:	e04d      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
	case IND_PWR_IMD_Pin:
		ScheduleTask(SCH_DEBOUNCE_PWR, DEBOUNCE_PERIOD, 0, 0);
 8001672:	2300      	movs	r3, #0
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	2008      	movs	r0, #8
 800167a:	f000 f855 	bl	8001728 <ScheduleTask>
		break;
 800167e:	e046      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
	case IND_PC_Pin:
		ScheduleTask(SCH_DEBOUNCE_PC, DEBOUNCE_PERIOD, 0, 0);
 8001680:	2300      	movs	r3, #0
 8001682:	2200      	movs	r2, #0
 8001684:	2105      	movs	r1, #5
 8001686:	2006      	movs	r0, #6
 8001688:	f000 f84e 	bl	8001728 <ScheduleTask>
		break;
 800168c:	e03f      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
	case REQUEST_TS_Pin:
		ScheduleTask(SCH_DEBOUNCE_TS_REQUEST, DEBOUNCE_PERIOD, 0, 0);
 800168e:	2300      	movs	r3, #0
 8001690:	2200      	movs	r2, #0
 8001692:	2105      	movs	r1, #5
 8001694:	2007      	movs	r0, #7
 8001696:	f000 f847 	bl	8001728 <ScheduleTask>
		break;
 800169a:	e038      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
	case RELAY_AUX_AIRNEG_Pin:
		if(!BITCHECK(hrcb.RELAY_IT_IGNORE, RI_AIRNEG)){
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800169e:	789b      	ldrb	r3, [r3, #2]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d12d      	bne.n	8001704 <HAL_GPIO_EXTI_Callback+0x1b4>
			ScheduleTask(SCH_DEBOUNCE_RELAYS, DEBOUNCE_PERIOD, 0, 0);
 80016a8:	2300      	movs	r3, #0
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2005      	movs	r0, #5
 80016b0:	f000 f83a 	bl	8001728 <ScheduleTask>
		}
		break;
 80016b4:	e026      	b.n	8001704 <HAL_GPIO_EXTI_Callback+0x1b4>
	case RELAY_AUX_AIRPOS_Pin:
		if(!BITCHECK(hrcb.RELAY_IT_IGNORE, RI_AIRPOS)){
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80016b8:	789b      	ldrb	r3, [r3, #2]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d122      	bne.n	8001708 <HAL_GPIO_EXTI_Callback+0x1b8>
			ScheduleTask(SCH_DEBOUNCE_RELAYS, DEBOUNCE_PERIOD, 0, 0);
 80016c2:	2300      	movs	r3, #0
 80016c4:	2200      	movs	r2, #0
 80016c6:	2105      	movs	r1, #5
 80016c8:	2005      	movs	r0, #5
 80016ca:	f000 f82d 	bl	8001728 <ScheduleTask>
		}
		break;
 80016ce:	e01b      	b.n	8001708 <HAL_GPIO_EXTI_Callback+0x1b8>
	case RELAY_AUX_PC_Pin:
		if(!BITCHECK(hrcb.RELAY_IT_IGNORE, RI_PC)){
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d117      	bne.n	800170c <HAL_GPIO_EXTI_Callback+0x1bc>
			ScheduleTask(SCH_DEBOUNCE_RELAYS, DEBOUNCE_PERIOD, 0, 0);
 80016dc:	2300      	movs	r3, #0
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	2005      	movs	r0, #5
 80016e4:	f000 f820 	bl	8001728 <ScheduleTask>
		}
		break;
 80016e8:	e010      	b.n	800170c <HAL_GPIO_EXTI_Callback+0x1bc>
	case IND_60V_Pin:
		ScheduleTask(SCH_DEBOUNCE_RELAYS, DEBOUNCE_PERIOD, 0, 0);
 80016ea:	2300      	movs	r3, #0
 80016ec:	2200      	movs	r2, #0
 80016ee:	2105      	movs	r1, #5
 80016f0:	2005      	movs	r0, #5
 80016f2:	f000 f819 	bl	8001728 <ScheduleTask>
		break;
 80016f6:	e00a      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
		return;
 80016f8:	bf00      	nop
 80016fa:	e008      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
		return;
 80016fc:	bf00      	nop
 80016fe:	e006      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
		return;
 8001700:	bf00      	nop
 8001702:	e004      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
		break;
 8001704:	bf00      	nop
 8001706:	e002      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
		break;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <HAL_GPIO_EXTI_Callback+0x1be>
		break;
 800170c:	bf00      	nop
	}
}
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000368 	.word	0x20000368
 8001718:	20000260 	.word	0x20000260

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <ScheduleTask>:
Schedule CurrentTime;
Schedule ScheduleQueue[SCHEDULE_N];

uint8_t TaskSchedulerSoftClock_Flag;

void ScheduleTask(SCHEDULES schedule, uint32_t period, uint8_t auto_re, uint32_t offset){
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	4613      	mov	r3, r2
 8001738:	73bb      	strb	r3, [r7, #14]
	if(period==0){
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d114      	bne.n	800176a <ScheduleTask+0x42>
		ScheduleQueue[schedule].time_ms = 0xFFFFFFFF;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <ScheduleTask+0xbc>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	f04f 32ff 	mov.w	r2, #4294967295
 8001752:	601a      	str	r2, [r3, #0]
		ScheduleQueue[schedule].flag = True;
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	4923      	ldr	r1, [pc, #140]	; (80017e4 <ScheduleTask+0xbc>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	3304      	adds	r3, #4
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e023      	b.n	80017b2 <ScheduleTask+0x8a>
	}else if(period==0xFFFFFFFF){
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d10a      	bne.n	8001788 <ScheduleTask+0x60>
		ScheduleQueue[schedule].time_ms = 0xFFFFFFFF;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	491b      	ldr	r1, [pc, #108]	; (80017e4 <ScheduleTask+0xbc>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e014      	b.n	80017b2 <ScheduleTask+0x8a>
	}
	else{
		ScheduleQueue[schedule].time_ms = (CurrentTime.time_ms+period+offset)%0xFFFFFFFF;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <ScheduleTask+0xc0>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	441a      	add	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	7bf9      	ldrb	r1, [r7, #15]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	bf2c      	ite	cs
 800179c:	2201      	movcs	r2, #1
 800179e:	2200      	movcc	r2, #0
 80017a0:	4252      	negs	r2, r2
 80017a2:	1a9a      	subs	r2, r3, r2
 80017a4:	480f      	ldr	r0, [pc, #60]	; (80017e4 <ScheduleTask+0xbc>)
 80017a6:	460b      	mov	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	440b      	add	r3, r1
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4403      	add	r3, r0
 80017b0:	601a      	str	r2, [r3, #0]
	}
    ScheduleQueue[schedule].auto_schedule = auto_re;
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	490b      	ldr	r1, [pc, #44]	; (80017e4 <ScheduleTask+0xbc>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3305      	adds	r3, #5
 80017c2:	7bba      	ldrb	r2, [r7, #14]
 80017c4:	701a      	strb	r2, [r3, #0]
    ScheduleQueue[schedule].period = period;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	4906      	ldr	r1, [pc, #24]	; (80017e4 <ScheduleTask+0xbc>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3308      	adds	r3, #8
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	601a      	str	r2, [r3, #0]

}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000378 	.word	0x20000378
 80017e8:	2000036c 	.word	0x2000036c

080017ec <ScheduleTaskStop>:

void ScheduleTaskStop(SCHEDULES schedule){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	ScheduleTask(schedule, 0xFFFFFFFF, False, 0);
 80017f6:	79f8      	ldrb	r0, [r7, #7]
 80017f8:	2300      	movs	r3, #0
 80017fa:	2200      	movs	r2, #0
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	f7ff ff92 	bl	8001728 <ScheduleTask>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <TaskScheduleSoftClock>:

void TaskScheduleSoftClock(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	if(!TaskSchedulerSoftClock_Flag){
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <TaskScheduleSoftClock+0xc0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d054      	beq.n	80018c4 <TaskScheduleSoftClock+0xb8>
		return;
	}
	TaskSchedulerSoftClock_Flag = 0;
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <TaskScheduleSoftClock+0xc0>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]

    if(++CurrentTime.time_ms==0xFFFFFFFF){
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <TaskScheduleSoftClock+0xc4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a2a      	ldr	r2, [pc, #168]	; (80018d0 <TaskScheduleSoftClock+0xc4>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <TaskScheduleSoftClock+0xc4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d102      	bne.n	800183a <TaskScheduleSoftClock+0x2e>
    	CurrentTime.time_ms=0;
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <TaskScheduleSoftClock+0xc4>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
    }

    for(int task = 0; task<SCHEDULE_N; task++){
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e03d      	b.n	80018bc <TaskScheduleSoftClock+0xb0>
        if((ScheduleQueue[task].time_ms == CurrentTime.time_ms)){
 8001840:	4924      	ldr	r1, [pc, #144]	; (80018d4 <TaskScheduleSoftClock+0xc8>)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <TaskScheduleSoftClock+0xc4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d12e      	bne.n	80018b6 <TaskScheduleSoftClock+0xaa>
            ScheduleQueue[task].flag = True;
 8001858:	491e      	ldr	r1, [pc, #120]	; (80018d4 <TaskScheduleSoftClock+0xc8>)
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3304      	adds	r3, #4
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
            if(ScheduleQueue[task].auto_schedule){
 800186c:	4919      	ldr	r1, [pc, #100]	; (80018d4 <TaskScheduleSoftClock+0xc8>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3305      	adds	r3, #5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00f      	beq.n	80018a2 <TaskScheduleSoftClock+0x96>
                ScheduleTask(task, ScheduleQueue[task].period, True,0);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	b2d8      	uxtb	r0, r3
 8001886:	4913      	ldr	r1, [pc, #76]	; (80018d4 <TaskScheduleSoftClock+0xc8>)
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	3308      	adds	r3, #8
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2201      	movs	r2, #1
 800189c:	f7ff ff44 	bl	8001728 <ScheduleTask>
 80018a0:	e009      	b.n	80018b6 <TaskScheduleSoftClock+0xaa>
            }else{
                ScheduleQueue[task].time_ms = 0xFFFFFFFF;
 80018a2:	490c      	ldr	r1, [pc, #48]	; (80018d4 <TaskScheduleSoftClock+0xc8>)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	601a      	str	r2, [r3, #0]
    for(int task = 0; task<SCHEDULE_N; task++){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b0d      	cmp	r3, #13
 80018c0:	ddbe      	ble.n	8001840 <TaskScheduleSoftClock+0x34>
 80018c2:	e000      	b.n	80018c6 <TaskScheduleSoftClock+0xba>
		return;
 80018c4:	bf00      	nop
            }
        }
    }
}
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000420 	.word	0x20000420
 80018d0:	2000036c 	.word	0x2000036c
 80018d4:	20000378 	.word	0x20000378

080018d8 <TaskScheduleSoftClock_FlagSet>:

void TaskScheduleSoftClock_FlagSet(){
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	TaskSchedulerSoftClock_Flag = 1;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <TaskScheduleSoftClock_FlagSet+0x14>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000420 	.word	0x20000420

080018f0 <IWDG_Delay>:


void IWDG_Delay(uint32_t delay){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	while(delay>0){
 80018f8:	e00c      	b.n	8001914 <IWDG_Delay+0x24>
		if(delay>=IWDG_DELAY_PERIOD){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	d903      	bls.n	8001908 <IWDG_Delay+0x18>
			HAL_Delay(IWDG_DELAY_PERIOD);
 8001900:	200a      	movs	r0, #10
 8001902:	f000 fa43 	bl	8001d8c <HAL_Delay>
 8001906:	e002      	b.n	800190e <IWDG_Delay+0x1e>
		}else{
			HAL_Delay(delay);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fa3f 	bl	8001d8c <HAL_Delay>
		}
		delay-=IWDG_DELAY_PERIOD;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3b0a      	subs	r3, #10
 8001912:	607b      	str	r3, [r7, #4]
	while(delay>0){
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ef      	bne.n	80018fa <IWDG_Delay+0xa>
		IWDG_RESET();
	}
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_MspInit+0x5c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_MspInit+0x5c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_MspInit+0x5c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x5c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x5c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x5c>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_MspInit+0x60>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_MspInit+0x60>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <HAL_CAN_MspInit+0xd0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d153      	bne.n	8001a50 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_CAN_MspInit+0xd4>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <HAL_CAN_MspInit+0xd4>)
 80019ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b2:	61d3      	str	r3, [r2, #28]
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_CAN_MspInit+0xd4>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_CAN_MspInit+0xd4>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <HAL_CAN_MspInit+0xd4>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_CAN_MspInit+0xd4>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	481c      	ldr	r0, [pc, #112]	; (8001a60 <HAL_CAN_MspInit+0xd8>)
 80019ee:	f001 f94b 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4816      	ldr	r0, [pc, #88]	; (8001a60 <HAL_CAN_MspInit+0xd8>)
 8001a08:	f001 f93e 	bl	8002c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_CAN_MspInit+0xdc>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_CAN_MspInit+0xdc>)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2013      	movs	r0, #19
 8001a36:	f001 f8ec 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001a3a:	2013      	movs	r0, #19
 8001a3c:	f001 f905 	bl	8002c4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2014      	movs	r0, #20
 8001a46:	f001 f8e4 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001a4a:	2014      	movs	r0, #20
 8001a4c:	f001 f8fd 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40006400 	.word	0x40006400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40010000 	.word	0x40010000

08001a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_TIM_Base_MspInit+0x78>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d114      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a84:	6193      	str	r3, [r2, #24]
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2019      	movs	r0, #25
 8001a98:	f001 f8bb 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a9c:	2019      	movs	r0, #25
 8001a9e:	f001 f8d4 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aa2:	e018      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d113      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_TIM_Base_MspInit+0x7c>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	201c      	movs	r0, #28
 8001acc:	f001 f8a1 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad0:	201c      	movs	r0, #28
 8001ad2:	f001 f8ba 	bl	8002c4a <HAL_NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_UART_MspInit+0x78>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d126      	bne.n	8001b56 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3e:	2312      	movs	r3, #18
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b52:	f001 f899 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010800 	.word	0x40010800

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb2:	f000 f8cf 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IND_PC_Pin);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f001 fa26 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REQUEST_TS_Pin);
 8001bcc:	2008      	movs	r0, #8
 8001bce:	f001 fa1f 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IND_60V_Pin);
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f001 fa18 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001bea:	f000 fd0b 	bl	8002604 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000026c 	.word	0x2000026c

08001bf8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bfe:	f000 fd01 	bl	8002604 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000026c 	.word	0x2000026c

08001c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RELAY_AUX_AIRPOS_Pin);
 8001c10:	2020      	movs	r0, #32
 8001c12:	f001 f9fd 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RELAY_AUX_AIRNEG_Pin);
 8001c16:	2040      	movs	r0, #64	; 0x40
 8001c18:	f001 f9fa 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RELAY_AUX_PC_Pin);
 8001c1c:	2080      	movs	r0, #128	; 0x80
 8001c1e:	f001 f9f7 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM1_UP_IRQHandler+0x10>)
 8001c2e:	f001 feeb 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000294 	.word	0x20000294

08001c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM2_IRQHandler+0x10>)
 8001c42:	f001 fee1 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002dc 	.word	0x200002dc

08001c50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IND_PWR_FAN1_Pin);
 8001c54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c58:	f001 f9da 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IND_PWR_FAN2_Pin);
 8001c5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c60:	f001 f9d6 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IND_PWR_IMD_Pin);
 8001c64:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c68:	f001 f9d2 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ca2:	f7ff ffe5 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f002 fadb 	bl	8004260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff f99b 	bl	8000fe4 <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cb8:	08004300 	.word	0x08004300
  ldr r2, =_sbss
 8001cbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cc0:	20000428 	.word	0x20000428

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_Init+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_Init+0x28>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 ff8f 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fe1e 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 ffab 	bl	8002c6e <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 ff6f 	bl	8002c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000424 	.word	0x20000424

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000424 	.word	0x20000424

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0ed      	b.n	8001fc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fdc8 	bl	8001988 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff ffb6 	bl	8001d78 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e0e:	e012      	b.n	8001e36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e10:	f7ff ffb2 	bl	8001d78 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b0a      	cmp	r3, #10
 8001e1c:	d90b      	bls.n	8001e36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0c5      	b.n	8001fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0e5      	beq.n	8001e10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0202 	bic.w	r2, r2, #2
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff ff90 	bl	8001d78 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5a:	e012      	b.n	8001e82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e5c:	f7ff ff8c 	bl	8001d78 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b0a      	cmp	r3, #10
 8001e68:	d90b      	bls.n	8001e82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2205      	movs	r2, #5
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e09f      	b.n	8001fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e5      	bne.n	8001e5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e007      	b.n	8001eba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7e5b      	ldrb	r3, [r3, #25]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e9b      	ldrb	r3, [r3, #26]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0220 	orr.w	r2, r2, #32
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0220 	bic.w	r2, r2, #32
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7edb      	ldrb	r3, [r3, #27]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0210 	bic.w	r2, r2, #16
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e007      	b.n	8001f38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0210 	orr.w	r2, r2, #16
 8001f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7f1b      	ldrb	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e007      	b.n	8001f62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7f5b      	ldrb	r3, [r3, #29]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0204 	orr.w	r2, r2, #4
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e007      	b.n	8001f8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0204 	bic.w	r2, r2, #4
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	ea42 0103 	orr.w	r1, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d003      	beq.n	8001ff0 <HAL_CAN_ConfigFilter+0x26>
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	f040 80aa 	bne.w	8002144 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d123      	bne.n	8002072 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	401a      	ands	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800204c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3248      	adds	r2, #72	; 0x48
 8002052:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002066:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	3348      	adds	r3, #72	; 0x48
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d122      	bne.n	80020c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800209a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3248      	adds	r2, #72	; 0x48
 80020a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020b6:	6979      	ldr	r1, [r7, #20]
 80020b8:	3348      	adds	r3, #72	; 0x48
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020da:	e007      	b.n	80020ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002106:	e007      	b.n	8002118 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002136:	f023 0201 	bic.w	r2, r3, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e006      	b.n	8002152 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
  }
}
 8002152:	4618      	mov	r0, r3
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d12e      	bne.n	80021ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff fdf6 	bl	8001d78 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800218e:	e012      	b.n	80021b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002190:	f7ff fdf2 	bl	8001d78 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d90b      	bls.n	80021b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e012      	b.n	80021dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e5      	bne.n	8002190 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e006      	b.n	80021dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002202:	7ffb      	ldrb	r3, [r7, #31]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d003      	beq.n	8002210 <HAL_CAN_AddTxMessage+0x2c>
 8002208:	7ffb      	ldrb	r3, [r7, #31]
 800220a:	2b02      	cmp	r3, #2
 800220c:	f040 80b8 	bne.w	8002380 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80a0 	beq.w	8002370 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	0e1b      	lsrs	r3, r3, #24
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d907      	bls.n	8002250 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e09e      	b.n	800238e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002250:	2201      	movs	r2, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	409a      	lsls	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10d      	bne.n	800227e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800226c:	68f9      	ldr	r1, [r7, #12]
 800226e:	6809      	ldr	r1, [r1, #0]
 8002270:	431a      	orrs	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3318      	adds	r3, #24
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	440b      	add	r3, r1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e00f      	b.n	800229e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002288:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002292:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3318      	adds	r3, #24
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	440b      	add	r3, r1
 800229c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3318      	adds	r3, #24
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	440b      	add	r3, r1
 80022ae:	3304      	adds	r3, #4
 80022b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	7d1b      	ldrb	r3, [r3, #20]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d111      	bne.n	80022de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3318      	adds	r3, #24
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3318      	adds	r3, #24
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	440b      	add	r3, r1
 80022da:	3304      	adds	r3, #4
 80022dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3307      	adds	r3, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3306      	adds	r3, #6
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3305      	adds	r3, #5
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	3204      	adds	r2, #4
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	4610      	mov	r0, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6811      	ldr	r1, [r2, #0]
 8002306:	ea43 0200 	orr.w	r2, r3, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	440b      	add	r3, r1
 8002310:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002314:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3303      	adds	r3, #3
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	061a      	lsls	r2, r3, #24
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3302      	adds	r3, #2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3301      	adds	r3, #1
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	4313      	orrs	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	4610      	mov	r0, r2
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	6811      	ldr	r1, [r2, #0]
 800233c:	ea43 0200 	orr.w	r2, r3, r0
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	440b      	add	r3, r1
 8002346:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800234a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3318      	adds	r3, #24
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	4413      	add	r3, r2
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3318      	adds	r3, #24
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	440b      	add	r3, r1
 800236a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e00e      	b.n	800238e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e006      	b.n	800238e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d003      	beq.n	80023bc <HAL_CAN_GetRxMessage+0x24>
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	f040 80f3 	bne.w	80025a2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10e      	bne.n	80023e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d116      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0e7      	b.n	80025b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0d8      	b.n	80025b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	331b      	adds	r3, #27
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0204 	and.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	331b      	adds	r3, #27
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0d5b      	lsrs	r3, r3, #21
 800242c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e00b      	b.n	800244e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	331b      	adds	r3, #27
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	331b      	adds	r3, #27
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0202 	and.w	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	331b      	adds	r3, #27
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	3304      	adds	r3, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	331b      	adds	r3, #27
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	b2da      	uxtb	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	331b      	adds	r3, #27
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0a1a      	lsrs	r2, r3, #8
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0c1a      	lsrs	r2, r3, #16
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3302      	adds	r3, #2
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e1a      	lsrs	r2, r3, #24
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3303      	adds	r3, #3
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4413      	add	r3, r2
 800251a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3304      	adds	r3, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0a1a      	lsrs	r2, r3, #8
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3305      	adds	r3, #5
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0c1a      	lsrs	r2, r3, #16
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3306      	adds	r3, #6
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e1a      	lsrs	r2, r3, #24
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3307      	adds	r3, #7
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	e007      	b.n	800259e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e006      	b.n	80025b0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d002      	beq.n	80025d8 <HAL_CAN_ActivateNotification+0x1e>
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d109      	bne.n	80025ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e006      	b.n	80025fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07c      	beq.n	8002744 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d023      	beq.n	800269c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fd fe4e 	bl	8000308 <HAL_CAN_TxMailbox0CompleteCallback>
 800266c:	e016      	b.n	800269c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	e00c      	b.n	800269c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	e002      	b.n	800269c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f97d 	bl	8002996 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f959 	bl	8002972 <HAL_CAN_TxMailbox1CompleteCallback>
 80026c0:	e016      	b.n	80026f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	e00c      	b.n	80026f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
 80026e8:	e002      	b.n	80026f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f95c 	bl	80029a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f938 	bl	8002984 <HAL_CAN_TxMailbox2CompleteCallback>
 8002714:	e016      	b.n	8002744 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e00c      	b.n	8002744 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	e002      	b.n	8002744 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f93b 	bl	80029ba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00c      	beq.n	8002768 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800275e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f921 	bl	80029cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fd fdba 	bl	800031c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2208      	movs	r2, #8
 80027e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f901 	bl	80029f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8e9 	bl	80029de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2210      	movs	r2, #16
 8002826:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8ea 	bl	8002a02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8e2 	bl	8002a14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d07b      	beq.n	8002952 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d072      	beq.n	800294a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d043      	beq.n	800294a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03e      	beq.n	800294a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d2:	2b60      	cmp	r3, #96	; 0x60
 80028d4:	d02b      	beq.n	800292e <HAL_CAN_IRQHandler+0x32a>
 80028d6:	2b60      	cmp	r3, #96	; 0x60
 80028d8:	d82e      	bhi.n	8002938 <HAL_CAN_IRQHandler+0x334>
 80028da:	2b50      	cmp	r3, #80	; 0x50
 80028dc:	d022      	beq.n	8002924 <HAL_CAN_IRQHandler+0x320>
 80028de:	2b50      	cmp	r3, #80	; 0x50
 80028e0:	d82a      	bhi.n	8002938 <HAL_CAN_IRQHandler+0x334>
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d019      	beq.n	800291a <HAL_CAN_IRQHandler+0x316>
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d826      	bhi.n	8002938 <HAL_CAN_IRQHandler+0x334>
 80028ea:	2b30      	cmp	r3, #48	; 0x30
 80028ec:	d010      	beq.n	8002910 <HAL_CAN_IRQHandler+0x30c>
 80028ee:	2b30      	cmp	r3, #48	; 0x30
 80028f0:	d822      	bhi.n	8002938 <HAL_CAN_IRQHandler+0x334>
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d002      	beq.n	80028fc <HAL_CAN_IRQHandler+0x2f8>
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d005      	beq.n	8002906 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028fa:	e01d      	b.n	8002938 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002904:	e019      	b.n	800293a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800290e:	e014      	b.n	800293a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002918:	e00f      	b.n	800293a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002922:	e00a      	b.n	800293a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800292c:	e005      	b.n	800293a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002936:	e000      	b.n	800293a <HAL_CAN_IRQHandler+0x336>
            break;
 8002938:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002948:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f85e 	bl	8002a26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a54:	4013      	ands	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	60d3      	str	r3, [r2, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <__NVIC_GetPriorityGrouping+0x18>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 0307 	and.w	r3, r3, #7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db0b      	blt.n	8002ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <__NVIC_EnableIRQ+0x34>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2001      	movs	r0, #1
 8002abe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b90:	f3bf 8f4f 	dsb	sy
}
 8002b94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <__NVIC_SystemReset+0x24>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <__NVIC_SystemReset+0x24>)
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <__NVIC_SystemReset+0x28>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ba6:	f3bf 8f4f 	dsb	sy
}
 8002baa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <__NVIC_SystemReset+0x20>
 8002bb0:	e000ed00 	.word	0xe000ed00
 8002bb4:	05fa0004 	.word	0x05fa0004

08002bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc8:	d301      	bcc.n	8002bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00f      	b.n	8002bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <SysTick_Config+0x40>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f7ff ff7a 	bl	8002ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <SysTick_Config+0x40>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <SysTick_Config+0x40>)
 8002be8:	2207      	movs	r2, #7
 8002bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff17 	bl	8002a38 <__NVIC_SetPriorityGrouping>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c24:	f7ff ff2c 	bl	8002a80 <__NVIC_GetPriorityGrouping>
 8002c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff7a 	bl	8002b28 <NVIC_EncodePriority>
 8002c34:	4602      	mov	r2, r0
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff49 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff1f 	bl	8002a9c <__NVIC_EnableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002c6a:	f7ff ff8f 	bl	8002b8c <__NVIC_SystemReset>

08002c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff9e 	bl	8002bb8 <SysTick_Config>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b08b      	sub	sp, #44	; 0x2c
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	e161      	b.n	8002f60 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 8150 	bne.w	8002f5a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a97      	ldr	r2, [pc, #604]	; (8002f1c <HAL_GPIO_Init+0x294>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d05e      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a95      	ldr	r2, [pc, #596]	; (8002f1c <HAL_GPIO_Init+0x294>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d875      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cca:	4a95      	ldr	r2, [pc, #596]	; (8002f20 <HAL_GPIO_Init+0x298>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d058      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cd0:	4a93      	ldr	r2, [pc, #588]	; (8002f20 <HAL_GPIO_Init+0x298>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d86f      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cd6:	4a93      	ldr	r2, [pc, #588]	; (8002f24 <HAL_GPIO_Init+0x29c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d052      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cdc:	4a91      	ldr	r2, [pc, #580]	; (8002f24 <HAL_GPIO_Init+0x29c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d869      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002ce2:	4a91      	ldr	r2, [pc, #580]	; (8002f28 <HAL_GPIO_Init+0x2a0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04c      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002ce8:	4a8f      	ldr	r2, [pc, #572]	; (8002f28 <HAL_GPIO_Init+0x2a0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d863      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cee:	4a8f      	ldr	r2, [pc, #572]	; (8002f2c <HAL_GPIO_Init+0x2a4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d046      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cf4:	4a8d      	ldr	r2, [pc, #564]	; (8002f2c <HAL_GPIO_Init+0x2a4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d85d      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d82a      	bhi.n	8002d54 <HAL_GPIO_Init+0xcc>
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d859      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_GPIO_Init+0x80>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d83 	.word	0x08002d83
 8002d0c:	08002d5d 	.word	0x08002d5d
 8002d10:	08002d6f 	.word	0x08002d6f
 8002d14:	08002db1 	.word	0x08002db1
 8002d18:	08002db7 	.word	0x08002db7
 8002d1c:	08002db7 	.word	0x08002db7
 8002d20:	08002db7 	.word	0x08002db7
 8002d24:	08002db7 	.word	0x08002db7
 8002d28:	08002db7 	.word	0x08002db7
 8002d2c:	08002db7 	.word	0x08002db7
 8002d30:	08002db7 	.word	0x08002db7
 8002d34:	08002db7 	.word	0x08002db7
 8002d38:	08002db7 	.word	0x08002db7
 8002d3c:	08002db7 	.word	0x08002db7
 8002d40:	08002db7 	.word	0x08002db7
 8002d44:	08002db7 	.word	0x08002db7
 8002d48:	08002db7 	.word	0x08002db7
 8002d4c:	08002d65 	.word	0x08002d65
 8002d50:	08002d79 	.word	0x08002d79
 8002d54:	4a76      	ldr	r2, [pc, #472]	; (8002f30 <HAL_GPIO_Init+0x2a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d5a:	e02c      	b.n	8002db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e029      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e024      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	3308      	adds	r3, #8
 8002d74:	623b      	str	r3, [r7, #32]
          break;
 8002d76:	e01f      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	623b      	str	r3, [r7, #32]
          break;
 8002d80:	e01a      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	623b      	str	r3, [r7, #32]
          break;
 8002d8e:	e013      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	611a      	str	r2, [r3, #16]
          break;
 8002da2:	e009      	b.n	8002db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da4:	2308      	movs	r3, #8
 8002da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	615a      	str	r2, [r3, #20]
          break;
 8002dae:	e003      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
          break;
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          break;
 8002db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d801      	bhi.n	8002dc2 <HAL_GPIO_Init+0x13a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	e001      	b.n	8002dc6 <HAL_GPIO_Init+0x13e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2bff      	cmp	r3, #255	; 0xff
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_GPIO_Init+0x14c>
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	e002      	b.n	8002dda <HAL_GPIO_Init+0x152>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	3b08      	subs	r3, #8
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	210f      	movs	r1, #15
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a9 	beq.w	8002f5a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e08:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <HAL_GPIO_Init+0x2ac>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <HAL_GPIO_Init+0x2ac>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6193      	str	r3, [r2, #24]
 8002e14:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_GPIO_Init+0x2ac>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e20:	4a45      	ldr	r2, [pc, #276]	; (8002f38 <HAL_GPIO_Init+0x2b0>)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3d      	ldr	r2, [pc, #244]	; (8002f3c <HAL_GPIO_Init+0x2b4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00d      	beq.n	8002e68 <HAL_GPIO_Init+0x1e0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <HAL_GPIO_Init+0x2b8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <HAL_GPIO_Init+0x1dc>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <HAL_GPIO_Init+0x2bc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <HAL_GPIO_Init+0x1d8>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e004      	b.n	8002e6a <HAL_GPIO_Init+0x1e2>
 8002e60:	2303      	movs	r3, #3
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_Init+0x1e2>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_GPIO_Init+0x1e2>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6c:	f002 0203 	and.w	r2, r2, #3
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	4093      	lsls	r3, r2
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e7a:	492f      	ldr	r1, [pc, #188]	; (8002f38 <HAL_GPIO_Init+0x2b0>)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	492b      	ldr	r1, [pc, #172]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ea2:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4927      	ldr	r1, [pc, #156]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4921      	ldr	r1, [pc, #132]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	491d      	ldr	r1, [pc, #116]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	4917      	ldr	r1, [pc, #92]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4913      	ldr	r1, [pc, #76]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01f      	beq.n	8002f4c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	490d      	ldr	r1, [pc, #52]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
 8002f18:	e01f      	b.n	8002f5a <HAL_GPIO_Init+0x2d2>
 8002f1a:	bf00      	nop
 8002f1c:	10320000 	.word	0x10320000
 8002f20:	10310000 	.word	0x10310000
 8002f24:	10220000 	.word	0x10220000
 8002f28:	10210000 	.word	0x10210000
 8002f2c:	10120000 	.word	0x10120000
 8002f30:	10110000 	.word	0x10110000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40010800 	.word	0x40010800
 8002f40:	40010c00 	.word	0x40010c00
 8002f44:	40011000 	.word	0x40011000
 8002f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_GPIO_Init+0x2f4>)
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4909      	ldr	r1, [pc, #36]	; (8002f7c <HAL_GPIO_Init+0x2f4>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f ae96 	bne.w	8002c9c <HAL_GPIO_Init+0x14>
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	372c      	adds	r7, #44	; 0x2c
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e001      	b.n	8002fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbe:	787b      	ldrb	r3, [r7, #1]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fca:	e003      	b.n	8002fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	041a      	lsls	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	611a      	str	r2, [r3, #16]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	041a      	lsls	r2, r3, #16
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	400b      	ands	r3, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fa8e 	bl	8001550 <HAL_GPIO_EXTI_Callback>
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e272      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	4b92      	ldr	r3, [pc, #584]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800306c:	4b8f      	ldr	r3, [pc, #572]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d112      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
 8003078:	4b8c      	ldr	r3, [pc, #560]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RCC_OscConfig+0x12c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e24c      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x76>
 80030a8:	4b80      	ldr	r3, [pc, #512]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7f      	ldr	r2, [pc, #508]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b78      	ldr	r3, [pc, #480]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a77      	ldr	r2, [pc, #476]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0xbc>
 80030e2:	4b72      	ldr	r3, [pc, #456]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a71      	ldr	r2, [pc, #452]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a67      	ldr	r2, [pc, #412]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fe2c 	bl	8001d78 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe fe28 	bl	8001d78 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e200      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xe4>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fe18 	bl	8001d78 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe fe14 	bl	8001d78 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1ec      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x10c>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317a:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
 8003192:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1c0      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e03a      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fe fdcd 	bl	8001d78 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e2:	f7fe fdc9 	bl	8001d78 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1a1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4927      	ldr	r1, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e015      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fdac 	bl	8001d78 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7fe fda8 	bl	8001d78 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e180      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03a      	beq.n	80032c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe fd8c 	bl	8001d78 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7fe fd88 	bl	8001d78 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e160      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003282:	2001      	movs	r0, #1
 8003284:	f000 fad8 	bl	8003838 <RCC_Delay>
 8003288:	e01c      	b.n	80032c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe fd72 	bl	8001d78 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe fd6e 	bl	8001d78 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d908      	bls.n	80032b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e146      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	42420000 	.word	0x42420000
 80032b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b92      	ldr	r3, [pc, #584]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e9      	bne.n	8003298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a6 	beq.w	800341e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a87      	ldr	r2, [pc, #540]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7e      	ldr	r2, [pc, #504]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe fd2f 	bl	8001d78 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe fd2b 	bl	8001d78 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	; 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e103      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b75      	ldr	r3, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x312>
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e02d      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x334>
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a69      	ldr	r2, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a66      	ldr	r2, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x356>
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003396:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b58      	ldr	r3, [pc, #352]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a57      	ldr	r2, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fcdf 	bl	8001d78 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fcdb 	bl	8001d78 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0b1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x37e>
 80033e0:	e014      	b.n	800340c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fcc9 	bl	8001d78 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fcc5 	bl	8001d78 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e09b      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ee      	bne.n	80033ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d061      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d146      	bne.n	80034ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCC_OscConfig+0x4cc>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fc99 	bl	8001d78 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fc95 	bl	8001d78 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e06d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4921      	ldr	r1, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a19      	ldr	r1, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	491b      	ldr	r1, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4cc>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe fc69 	bl	8001d78 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe fc65 	bl	8001d78 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e03d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x46a>
 80034c8:	e035      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fc52 	bl	8001d78 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fc4e 	bl	8001d78 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e026      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x498>
 80034f6:	e01e      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e019      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x500>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d0      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4965      	ldr	r1, [pc, #404]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d040      	beq.n	8003664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e073      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4936      	ldr	r1, [pc, #216]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003634:	f7fe fba0 	bl	8001d78 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fe fb9c 	bl	8001d78 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e053      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 020c 	and.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1eb      	bne.n	800363c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d210      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0207 	bic.w	r2, r3, #7
 800367a:	4922      	ldr	r1, [pc, #136]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fafe 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	080042e0 	.word	0x080042e0
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b490      	push	{r4, r7}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800371e:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003720:	1d3c      	adds	r4, r7, #4
 8003722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003728:	f240 2301 	movw	r3, #513	; 0x201
 800372c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x40>
 8003752:	2b08      	cmp	r3, #8
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x46>
 8003756:	e02b      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800375a:	623b      	str	r3, [r7, #32]
      break;
 800375c:	e02b      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	0c9b      	lsrs	r3, r3, #18
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3328      	adds	r3, #40	; 0x28
 8003768:	443b      	add	r3, r7
 800376a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800376e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0c5b      	lsrs	r3, r3, #17
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	3328      	adds	r3, #40	; 0x28
 8003786:	443b      	add	r3, r7
 8003788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800378c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003792:	fb03 f202 	mul.w	r2, r3, r2
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e004      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	623b      	str	r3, [r7, #32]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b2:	623b      	str	r3, [r7, #32]
      break;
 80037b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3728      	adds	r7, #40	; 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc90      	pop	{r4, r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	080042d0 	.word	0x080042d0
 80037c8:	40021000 	.word	0x40021000
 80037cc:	007a1200 	.word	0x007a1200
 80037d0:	003d0900 	.word	0x003d0900

080037d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b02      	ldr	r3, [pc, #8]	; (80037e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	20000000 	.word	0x20000000

080037e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ec:	f7ff fff2 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	080042f0 	.word	0x080042f0

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003814:	f7ff ffde 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	0adb      	lsrs	r3, r3, #11
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4903      	ldr	r1, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	080042f0 	.word	0x080042f0

08003838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <RCC_Delay+0x34>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <RCC_Delay+0x38>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0a5b      	lsrs	r3, r3, #9
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003854:	bf00      	nop
  }
  while (Delay --);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e5a      	subs	r2, r3, #1
 800385a:	60fa      	str	r2, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f9      	bne.n	8003854 <RCC_Delay+0x1c>
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	20000000 	.word	0x20000000
 8003870:	10624dd3 	.word	0x10624dd3

08003874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e041      	b.n	800390a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe f8e4 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fa98 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e035      	b.n	8003998 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_TIM_Base_Start_IT+0x90>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_TIM_Base_Start_IT+0x4e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d004      	beq.n	8003962 <HAL_TIM_Base_Start_IT+0x4e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_TIM_Base_Start_IT+0x94>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b06      	cmp	r3, #6
 8003972:	d010      	beq.n	8003996 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	e007      	b.n	8003996 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400

080039ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <HAL_TIM_Base_Stop_IT+0x48>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a1a      	ldr	r2, [r3, #32]
 80039da:	f240 4344 	movw	r3, #1092	; 0x444
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_Base_Stop_IT+0x48>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0202 	mvn.w	r2, #2
 8003a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9b1 	bl	8003db2 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9a4 	bl	8003da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f9b3 	bl	8003dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0204 	mvn.w	r2, #4
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f987 	bl	8003db2 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f97a 	bl	8003da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f989 	bl	8003dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0208 	mvn.w	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f95d 	bl	8003db2 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f950 	bl	8003da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f95f 	bl	8003dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0210 	mvn.w	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2208      	movs	r2, #8
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f933 	bl	8003db2 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f926 	bl	8003da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f935 	bl	8003dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0201 	mvn.w	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fcba 	bl	8001500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d10e      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa67 	bl	8004086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8f9 	bl	8003dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0220 	mvn.w	r2, #32
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa32 	bl	8004074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_ConfigClockSource+0x18>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0b3      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x180>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d03e      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xd0>
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	f200 8087 	bhi.w	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	f000 8085 	beq.w	8003d84 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d87f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003c80:	2b70      	cmp	r3, #112	; 0x70
 8003c82:	d01a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0xa2>
 8003c84:	2b70      	cmp	r3, #112	; 0x70
 8003c86:	d87b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003c88:	2b60      	cmp	r3, #96	; 0x60
 8003c8a:	d050      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x116>
 8003c8c:	2b60      	cmp	r3, #96	; 0x60
 8003c8e:	d877      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d03c      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xf6>
 8003c94:	2b50      	cmp	r3, #80	; 0x50
 8003c96:	d873      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d058      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x136>
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d86f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d064      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x156>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d86b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d060      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x156>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d867      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05c      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x156>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d05a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cb8:	e062      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f000 f95c 	bl	8003f86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	609a      	str	r2, [r3, #8]
      break;
 8003ce6:	e04e      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f000 f945 	bl	8003f86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d0a:	609a      	str	r2, [r3, #8]
      break;
 8003d0c:	e03b      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f8bc 	bl	8003e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2150      	movs	r1, #80	; 0x50
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f913 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e02b      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f8da 	bl	8003ef4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2160      	movs	r1, #96	; 0x60
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f903 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e01b      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f89c 	bl	8003e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f8f3 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 f8ea 	bl	8003f52 <TIM_ITRx_SetConfig>
        break;
 8003d7e:	e002      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <TIM_Base_SetConfig+0xa8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d007      	beq.n	8003e10 <TIM_Base_SetConfig+0x28>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0x28>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <TIM_Base_SetConfig+0xac>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <TIM_Base_SetConfig+0xa8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0x52>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0x52>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <TIM_Base_SetConfig+0xac>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <TIM_Base_SetConfig+0xa8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d103      	bne.n	8003e80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	615a      	str	r2, [r3, #20]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400

08003e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f023 0201 	bic.w	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 030a 	bic.w	r3, r3, #10
 8003ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 0210 	bic.w	r2, r3, #16
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	621a      	str	r2, [r3, #32]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f043 0307 	orr.w	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	021a      	lsls	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e041      	b.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d004      	beq.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a10      	ldr	r2, [pc, #64]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10c      	bne.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40000400 	.word	0x40000400

08004074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e047      	b.n	800413a <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fd12 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f831 	bl	8004144 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800417e:	f023 030c 	bic.w	r3, r3, #12
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	430b      	orrs	r3, r1
 800418a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <UART_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041ac:	f7ff fb30 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	e002      	b.n	80041ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7ff fb18 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 80041b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <UART_SetConfig+0x118>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	0119      	lsls	r1, r3, #4
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009a      	lsls	r2, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <UART_SetConfig+0x118>)
 80041f2:	fba3 0302 	umull	r0, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2064      	movs	r0, #100	; 0x64
 80041fa:	fb00 f303 	mul.w	r3, r0, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <UART_SetConfig+0x118>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	4419      	add	r1, r3
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009a      	lsls	r2, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <UART_SetConfig+0x118>)
 800422a:	fba3 0302 	umull	r0, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2064      	movs	r0, #100	; 0x64
 8004232:	fb00 f303 	mul.w	r3, r0, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	3332      	adds	r3, #50	; 0x32
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <UART_SetConfig+0x118>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	440a      	add	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40013800 	.word	0x40013800
 800425c:	51eb851f 	.word	0x51eb851f

08004260 <__libc_init_array>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	2600      	movs	r6, #0
 8004264:	4d0c      	ldr	r5, [pc, #48]	; (8004298 <__libc_init_array+0x38>)
 8004266:	4c0d      	ldr	r4, [pc, #52]	; (800429c <__libc_init_array+0x3c>)
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	42a6      	cmp	r6, r4
 800426e:	d109      	bne.n	8004284 <__libc_init_array+0x24>
 8004270:	f000 f822 	bl	80042b8 <_init>
 8004274:	2600      	movs	r6, #0
 8004276:	4d0a      	ldr	r5, [pc, #40]	; (80042a0 <__libc_init_array+0x40>)
 8004278:	4c0a      	ldr	r4, [pc, #40]	; (80042a4 <__libc_init_array+0x44>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	42a6      	cmp	r6, r4
 8004280:	d105      	bne.n	800428e <__libc_init_array+0x2e>
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	f855 3b04 	ldr.w	r3, [r5], #4
 8004288:	4798      	blx	r3
 800428a:	3601      	adds	r6, #1
 800428c:	e7ee      	b.n	800426c <__libc_init_array+0xc>
 800428e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004292:	4798      	blx	r3
 8004294:	3601      	adds	r6, #1
 8004296:	e7f2      	b.n	800427e <__libc_init_array+0x1e>
 8004298:	080042f8 	.word	0x080042f8
 800429c:	080042f8 	.word	0x080042f8
 80042a0:	080042f8 	.word	0x080042f8
 80042a4:	080042fc 	.word	0x080042fc

080042a8 <memset>:
 80042a8:	4603      	mov	r3, r0
 80042aa:	4402      	add	r2, r0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memset+0xa>
 80042b0:	4770      	bx	lr
 80042b2:	f803 1b01 	strb.w	r1, [r3], #1
 80042b6:	e7f9      	b.n	80042ac <memset+0x4>

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
